{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/google-maps/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  CordovaCheck,\r\n  CordovaInstance,\r\n  InstanceCheck,\r\n  InstanceProperty,\r\n  IonicNativePlugin,\r\n  Plugin,\r\n  checkAvailability\r\n} from '@ionic-native/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/fromEvent';\r\n\r\nconst TARGET_ELEMENT_FINDING_QUERYS: string[] = [\r\n  '.show-page #',\r\n];\r\n\r\nexport type MapType =\r\n  'MAP_TYPE_NORMAL'\r\n  | 'MAP_TYPE_ROADMAP'\r\n  | 'MAP_TYPE_SATELLITE'\r\n  | 'MAP_TYPE_HYBRID'\r\n  | 'MAP_TYPE_TERRAIN'\r\n  | 'MAP_TYPE_NONE';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class LatLng implements ILatLng {\r\n\r\n  lat: number;\r\n  lng: number;\r\n\r\n  constructor(lat: number, lng: number) {\r\n    this.lat = lat;\r\n    this.lng = lng;\r\n  }\r\n\r\n  equals(other: ILatLng): boolean {\r\n    return this.lat === other.lat && this.lng === other.lng;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.lat + ',' + this.lng;\r\n  }\r\n\r\n  toUrlValue(precision?: number): string {\r\n    precision = precision || 6;\r\n\r\n    return this.lat.toFixed(precision) + ',' + this.lng.toFixed(precision);\r\n  }\r\n}\r\n\r\nexport interface ILatLngBounds {\r\n  northeast: ILatLng;\r\n  southwest: ILatLng;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class LatLngBounds implements ILatLngBounds {\r\n\r\n  @InstanceProperty northeast: ILatLng;\r\n  @InstanceProperty southwest: ILatLng;\r\n  @InstanceProperty type: string;\r\n  private _objectInstance: any;\r\n\r\n  constructor(points?: ILatLng[]) {\r\n    this._objectInstance = new (GoogleMaps.getPlugin()).LatLngBounds(points);\r\n  }\r\n\r\n  /**\r\n   * Converts to string\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  toString(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\r\n   * @param precision {number}\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  toUrlValue(precision?: number): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Extends this bounds to contain the given point.\r\n   * @param LatLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  extend(LatLng: ILatLng): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given lat/lng is in this bounds.\r\n   * @param LatLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  contains(LatLng: ILatLng): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Computes the center of this LatLngBounds\r\n   * @return {LatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCenter(): LatLng {\r\n    return;\r\n  }\r\n}\r\n\r\nexport interface GoogleMapControlOptions {\r\n\r\n  /**\r\n   * Turns the compass on or off.\r\n   */\r\n  compass?: boolean;\r\n\r\n  /**\r\n   * Turns the myLocation button on or off. If turns on this button, the application displays a permission dialog to obtain the geolocation data.\r\n   */\r\n  myLocationButton?: boolean;\r\n\r\n  /**\r\n   * Turns the myLocation control(blue dot) on or off. If turns on this control, the application displays a permission dialog to obtain the geolocation data.\r\n   */\r\n  myLocation?: boolean;\r\n\r\n  /**\r\n   * Turns the indoor picker on or off.\r\n   */\r\n  indoorPicker?: boolean;\r\n\r\n  /**\r\n   * **Android**\r\n   * Turns the map toolbar on or off.\r\n   */\r\n  mapToolbar?: boolean;\r\n\r\n  /**\r\n   * **Android**\r\n   * Turns the zoom controller on or off.\r\n   */\r\n  zoom?: boolean;\r\n\r\n  /**\r\n   * Accept extra properties for future updates\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface GoogleMapGestureOptions {\r\n\r\n  /**\r\n   * Set false to disable the scroll gesture (default: true)\r\n   */\r\n  scroll?: boolean;\r\n\r\n  /**\r\n   * Set false to disable the tilt gesture (default: true)\r\n   */\r\n  tilt?: boolean;\r\n\r\n  /**\r\n   * Set false to disable the zoom gesture (default: true)\r\n   */\r\n  zoom?: boolean;\r\n\r\n  /**\r\n   * Set false to disable the rotate gesture (default: true)\r\n   */\r\n  rotate?: boolean;\r\n\r\n  /**\r\n   * Accept extra properties for future updates\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface GoogleMapZoomOptions {\r\n  minZoom?: number;\r\n  maxZoom?: number;\r\n}\r\n\r\nexport interface GoogleMapPaddingOptions {\r\n  left?: number;\r\n  top?: number;\r\n  bottom?: number;\r\n  right?: number;\r\n}\r\n\r\nexport interface GoogleMapPreferenceOptions {\r\n\r\n  /**\r\n   * Minimum and maximum zoom levels for zooming gestures.\r\n   */\r\n  zoom?: GoogleMapZoomOptions;\r\n\r\n  /**\r\n   * Paddings of controls.\r\n   */\r\n  padding?: GoogleMapPaddingOptions;\r\n\r\n  /**\r\n   * Turns the 3D buildings layer on or off.\r\n   */\r\n  building?: boolean;\r\n\r\n  /**\r\n   * Sets the bounds limit for user panning gesture.\r\n   */\r\n  gestureBounds?: ILatLng[];\r\n\r\n  /**\r\n   * Accept extra properties for future updates\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface GoogleMapOptions {\r\n\r\n  /**\r\n   * mapType [options]\r\n   */\r\n  mapType?: MapType | string;\r\n\r\n  /**\r\n   * controls [options]\r\n   */\r\n  controls?: GoogleMapControlOptions;\r\n\r\n  /**\r\n   * gestures [options]\r\n   */\r\n  gestures?: GoogleMapGestureOptions;\r\n\r\n  /**\r\n   * Map styles [options]\r\n   * @ref https://developers.google.com/maps/documentation/javascript/style-reference\r\n   */\r\n  styles?: any[];\r\n\r\n  /**\r\n   * Initial camera position [options]\r\n   */\r\n  camera?: CameraPosition<any>;\r\n\r\n  /**\r\n   * preferences [options]\r\n   */\r\n  preferences?: GoogleMapPreferenceOptions;\r\n\r\n  /**\r\n   * Accept extra properties for future updates\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface CameraPosition<T> {\r\n  /**\r\n   * The center location of the camera view.\r\n   *\r\n   * [usage 1]\r\n   *\r\n   * let cameraPos: CameraPosition<ILatLng> = {\r\n   *   target: {lat: ..., lng: ...},\r\n   *   zoom: 10\r\n   * }\r\n   *\r\n   * [usage 2] The zoom property is ignored when you specify multiple position\r\n   *\r\n   * let cameraPos: CameraPosition<ILatLng[]> = {\r\n   *   target: [\r\n   *      {lat: ..., lng: ...},\r\n   *      {lat: ..., lng: ...},\r\n   *      {lat: ..., lng: ...}\r\n   *   ]\r\n   * }\r\n   */\r\n  target?: T;\r\n  /**\r\n   * View angle\r\n   */\r\n  tilt?: number;\r\n  /**\r\n   * Zoom level\r\n   */\r\n  zoom?: number;\r\n  /**\r\n   * Map orientation\r\n   */\r\n  bearing?: number;\r\n  /**\r\n   * The duration of animation in milliseconds\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * Camera padding in pixel\r\n   */\r\n  padding?: number;\r\n}\r\n\r\nexport interface CircleOptions {\r\n  /**\r\n   * Center position of circle\r\n   */\r\n  center: ILatLng;\r\n\r\n  /**\r\n   * Radius of circle in meter\r\n   */\r\n  radius: number;\r\n\r\n  /**\r\n   * Set the stroke color\r\n   * (rgb, rgba, #RRGGBB, \"colorname\", ...etc)\r\n   */\r\n  strokeColor?: string;\r\n\r\n  /**\r\n   * Set the stroke width in pixel\r\n   */\r\n  strokeWidth?: number;\r\n  /**\r\n   * Set the inside color of circle\r\n   * (rgb, rgba, #RRGGBB, \"colorname\", ...etc)\r\n   */\r\n  fillColor?: string;\r\n\r\n  /**\r\n   * Set to true to receive the CIRCLE_CLICK event\r\n   * (default: false)\r\n   */\r\n  clickable?: boolean;\r\n\r\n  /**\r\n   * Set to false to hide\r\n   */\r\n  visible?: boolean;\r\n\r\n  /**\r\n   * Z-index\r\n   */\r\n  zIndex?: number;\r\n\r\n  /**\r\n   * Accept own properties\r\n   * You can get the property later using `get()` method.\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface GeocoderRequest {\r\n\r\n  /**\r\n   * The address property or position property is required.\r\n   * You can not specify both property at the same time.\r\n   *\r\n   * [geocoding usage1]\r\n   * let request: GeocoderRequest = {\r\n   *   address: \"Los Angeles, California, USA\"\r\n   * }\r\n   *\r\n   * [geocoding usage2]\r\n   * let request: GeocoderRequest = {\r\n   *   address: [\r\n   *    \"Los Angeles, California, USA\",\r\n   *    \"San Francisco, California, USA\",\r\n   *   ]\r\n   * }\r\n   */\r\n  address?: string | string[];\r\n\r\n  /**\r\n   *\r\n   * [reverse-geocoding usage1]\r\n   * let request: GeocoderRequest = {\r\n   *   position: {\"lat\": 37.421655, \"lng\": -122.085637}\r\n   * }\r\n   *\r\n   * [reverse-geocoding usage2]\r\n   * let request: GeocoderRequest = {\r\n   *   position: [\r\n   *    {\"lat\": 37.421655, \"lng\": -122.085637},\r\n   *    {\"lat\": 37.332, \"lng\": -122.030781}\r\n   *   ]\r\n   * }\r\n   */\r\n  position?: ILatLng | ILatLng[];\r\n}\r\n\r\nexport interface GeocoderResult {\r\n  adminArea?: string;\r\n  country?: string;\r\n  countryCode?: string;\r\n  extra?: {\r\n    featureName?: string;\r\n    lines?: string[];\r\n    permises?: string;\r\n    phone?: string;\r\n    url?: string\r\n  };\r\n  locale?: string;\r\n  locality?: string;\r\n  position?: ILatLng;\r\n  postalCode?: string;\r\n  subAdminArea?: string;\r\n  subLocality?: string;\r\n  subThoroughfare?: string;\r\n  thoroughfare?: string;\r\n}\r\n\r\nexport interface GroundOverlayOptions {\r\n  /**\r\n   * URL of overlay\r\n   */\r\n  url: string;\r\n\r\n  /**\r\n   * Bounds, array of ILatLng\r\n   */\r\n  bounds: ILatLng[];\r\n\r\n  /**\r\n   * Set to true to receive the GROUND_OVERLAY_CLICK event\r\n   * (default: false)\r\n   */\r\n  clickable?: boolean;\r\n\r\n  /**\r\n   * Set to false to hide\r\n   */\r\n  visible?: boolean;\r\n\r\n  /**\r\n   * Opacity. From 0.0 to 1.0 .\r\n   */\r\n  opacity?: number;\r\n\r\n  /**\r\n   * Bearing\r\n   */\r\n  bearing?: number;\r\n\r\n  /**\r\n   * Z-index\r\n   */\r\n  zIndex?: number;\r\n\r\n  /**\r\n   * Accept own properties\r\n   * You can get the property later using `get()` method.\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface ILatLng {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\nexport interface MarkerIcon {\r\n  url?: string;\r\n  size?: {\r\n    width?: number;\r\n    height?: number;\r\n  };\r\n}\r\n\r\nexport interface MarkerOptions {\r\n  /**\r\n   * The icon image url or properties. Also you can specify HTML Color values. Alternatively you can specify the image as Base64\r\n   */\r\n  icon?: any;\r\n\r\n  /**\r\n   * The content of the infoWindow.\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * The snippet of the infoWindow.\r\n   */\r\n  snippet?: string;\r\n\r\n  /**\r\n   * The position of the marker.\r\n   */\r\n  position: ILatLng;\r\n\r\n  /**\r\n   *  Specify the anchor of the InfoWindow\r\n   */\r\n  infoWindowAnchor?: number[];\r\n\r\n  /**\r\n   * \tSpecify the anchor of icon image\r\n   */\r\n  anchor?: number[];\r\n\r\n  /**\r\n   * Set true if you want to enable to drag the marker. (Default: false) Important! Drag starts after long pressed on the marker.\r\n   */\r\n  draggable?: boolean;\r\n\r\n  /**\r\n   *  Set true if you want to use a flat marker. (Default: false)\r\n   */\r\n  flat?: boolean;\r\n\r\n  /**\r\n   *  Set rotation angle. (Default: 0)\r\n   */\r\n  rotation?: number;\r\n\r\n  /**\r\n   * Set false if you want to hide. (Default: true)\r\n   */\r\n  visible?: boolean;\r\n\r\n  /**\r\n   * Specify the options for title. This property work for normal InfoWindow.\r\n   */\r\n  styles?: any;\r\n\r\n  /**\r\n   * Which animation to play when marker is added to a map.\r\n   */\r\n  animation?: string;\r\n\r\n  /**\r\n   * Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays.\r\n   */\r\n  zIndex?: number;\r\n\r\n  /**\r\n   * Set to true to disable auto panning when the marker is clicked.\r\n   */\r\n  disableAutoPan?: boolean;\r\n\r\n  /**\r\n   * Accept own properties\r\n   * You can get the property later using `get()` method.\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface MarkerLabel {\r\n  /**\r\n   * Set true if use bold font\r\n   */\r\n  bold?: boolean;\r\n\r\n  /**\r\n   * Set font size in pixel\r\n   */\r\n  fontSize?: number;\r\n\r\n  /**\r\n   * color strings\r\n   */\r\n  color?: string;\r\n\r\n  /**\r\n   * Set true if use italic font\r\n   */\r\n  italic?: boolean;\r\n\r\n}\r\nexport interface MarkerClusterIcon {\r\n  /**\r\n   * Minimum number of clustering\r\n   */\r\n  min?: number;\r\n\r\n  /**\r\n   * Maximum number of clustering\r\n   */\r\n  max?: number;\r\n\r\n  /**\r\n   * anchor position of the marker\r\n   */\r\n  anchor?: any;\r\n\r\n  /**\r\n   * label option for clustered marker\r\n   */\r\n  label?: MarkerLabel;\r\n\r\n  /**\r\n   * icon url\r\n   */\r\n  url: string;\r\n\r\n  /**\r\n   * icon size\r\n   */\r\n  size?: {\r\n    width?: number;\r\n    height?: number;\r\n  };\r\n}\r\n\r\nexport interface MarkerClusterOptions {\r\n  /**\r\n   * Maximum zoom level of clustering\r\n   * (default: 15, max: 18)\r\n   */\r\n  maxZoomLevel?: number;\r\n\r\n  /**\r\n   * Draw a rectangle that contains all locations of clustered when you tap on a cluster marker.\r\n   * (default: true)\r\n   */\r\n  boundsDraw?: boolean;\r\n\r\n  /**\r\n   * Position list\r\n   * [\r\n   *   {title: \"store A\", position: {lat: ..., lng: ...}},\r\n   *   {title: \"store B\", position: {lat: ..., lng: ...}},\r\n   *   {title: \"store C\", position: {lat: ..., lng: ...}}\r\n   * ]\r\n   */\r\n  markers: MarkerOptions[];\r\n\r\n  /**\r\n   * Conditions of clustering\r\n   * [\r\n   *   {icon: \"assets/small.png\", min: 2, max: 10},\r\n   *   {icon: \"assets/middle.png\", min: 11, max: 30},\r\n   *   {icon: \"assets/large.png\", min: 31}\r\n   * ]\r\n   */\r\n  icons: MarkerClusterIcon[];\r\n\r\n  /**\r\n   * Accept own properties\r\n   * You can get the property later using `get()` method.\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface MyLocation {\r\n  latLng?: LatLng;\r\n  elapsedRealtimeNanos?: any;\r\n  time?: string;\r\n  accuracy?: any;\r\n  bearing?: number;\r\n  altitude?: any;\r\n  speed?: number;\r\n  provider?: any;\r\n  hashCode?: any;\r\n}\r\n\r\nexport interface MyLocationOptions {\r\n  /**\r\n   * Set true if you want to try to use GPS mandatory.\r\n   * In false, the plugin try to use GPS and network.\r\n   * (default: false)\r\n   */\r\n  enableHighAccuracy?: boolean;\r\n}\r\n\r\nexport interface PolygonOptions {\r\n  /**\r\n   * Pass ILatLng[] to specify the vertixes.\r\n   * You need to contain two points at least.\r\n   */\r\n  points: ILatLng[];\r\n\r\n  /**\r\n   * Set true if you want to draw the curve polygon based on the earth\r\n   * (default: false)\r\n   */\r\n  geodesic?: boolean;\r\n\r\n  /**\r\n   * Set the stroke color\r\n   * (rgb, rgba, #RRGGBB, \"colorname\", ...etc)\r\n   */\r\n  strokeColor?: string;\r\n\r\n  /**\r\n   * Set the stroke width in pixel\r\n   */\r\n  strokeWidth?: number;\r\n\r\n  /**\r\n   * Set the inside color of polygon\r\n   * (rgb, rgba, #RRGGBB, \"colorname\", ...etc)\r\n   */\r\n  fillColor?: string;\r\n\r\n  /**\r\n   * Set false if you want to create invisible polygon\r\n   * (Invisible polygon is not clickable, default true)\r\n   */\r\n  visible?: boolean;\r\n\r\n  /**\r\n   * Hierarchy z-index\r\n   */\r\n  zIndex?: number;\r\n\r\n  /**\r\n   * Pass ILatLng[][] to create holes in polygon\r\n   */\r\n  holes?: ILatLng[][];\r\n\r\n  /**\r\n   * Set true if you want to receive the POLYGON_CLICK event\r\n   * (default: false)\r\n   */\r\n  clickable?: boolean;\r\n\r\n  /**\r\n   * Accept own properties\r\n   * You can get the property later using `get()` method.\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface PolylineOptions {\r\n  /**\r\n   * Pass ILatLng[] to specify the vertixes.\r\n   * You need to contain two points at least.\r\n   */\r\n  points: ILatLng[];\r\n\r\n  /**\r\n   * Set false if you want to create invisible polyline\r\n   * (Invisible polyline is not clickable, default true)\r\n   */\r\n  visible?: boolean;\r\n\r\n  /**\r\n   * Set true if you want to draw the curve polyline based on the earth\r\n   * (default: false)\r\n   */\r\n  geodesic?: boolean;\r\n\r\n  /**\r\n   * Set the stroke color\r\n   * (rgb, rgba, #RRGGBB, \"colorname\", ...etc)\r\n   */\r\n  color?: string;\r\n\r\n  /**\r\n   * Set the stroke width in pixel\r\n   */\r\n  width?: number;\r\n\r\n  /**\r\n   * Hierarchy z-index\r\n   */\r\n  zIndex?: number;\r\n\r\n  /**\r\n   * Set true if you want to receive the POLYLINE_CLICK event\r\n   * (default: false)\r\n   */\r\n  clickable?: boolean;\r\n\r\n  /**\r\n   * Accept own properties\r\n   * You can get the property later using `get()` method.\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface TileOverlayOptions {\r\n  /**\r\n   * This callback must Returns string of image URL, or Promise.\r\n   * If no tile, you need to Returns null.\r\n   */\r\n  // getTile: (x: number, y: number, zoom: number) => string | Promise<string>;\r\n  getTile: (x: number, y: number, zoom: number) => string;\r\n\r\n  /**\r\n   * Set false if you want to create invisible tilelayer\r\n   * (default true)\r\n   */\r\n  visible?: boolean;\r\n\r\n  /**\r\n   * Hierarchy z-index of tilelayer\r\n   */\r\n  zIndex?: number;\r\n\r\n  /**\r\n   * Default: 512px\r\n   */\r\n  tileSize?: number;\r\n\r\n  /**\r\n   * Default: 1.0\r\n   */\r\n  opacity?: number;\r\n\r\n  /**\r\n   * Set true if you want to display the tile information over the tile images.\r\n   */\r\n  debug?: boolean;\r\n\r\n  /**\r\n   * Accept own properties\r\n   * You can get the property later using `get()` method.\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface ToDataUrlOptions {\r\n  /**\r\n   * True if you want get high quality map snapshot\r\n   */\r\n  uncompress?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * Options for map.addKmlOverlay() method\r\n */\r\nexport interface KmlOverlayOptions {\r\n  /*\r\n   * The url or file path of KML file. KMZ format is not supported.\r\n   */\r\n  url: string;\r\n\r\n  /*\r\n   * Do not fire the KML_CLICK event if false. Default is true.\r\n   */\r\n  clickable?: boolean;\r\n\r\n  /*\r\n   * Do not display the default infoWindow if true. Default is false.\r\n   */\r\n  suppressInfoWindows?: boolean;\r\n\r\n  /*\r\n   * icon option\r\n   */\r\n  icon?: string | MarkerIcon;\r\n\r\n  /**\r\n   * Accept own properties for future update\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Options for Environment.setEnv()\r\n */\r\nexport interface EnvOptions {\r\n  /*\r\n   * API key for Google Maps JavaScript API v3 for `https:` (on server)\r\n   */\r\n  API_KEY_FOR_BROWSER_RELEASE?: string;\r\n\r\n  /*\r\n   * API key for Google Maps JavaScript API v3 for `http:` (local development)\r\n   */\r\n  API_KEY_FOR_BROWSER_DEBUG?: string;\r\n\r\n  /**\r\n   * Accept own properties for future update\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class VisibleRegion implements ILatLngBounds {\r\n  private _objectInstance: any;\r\n\r\n  /**\r\n   * The northeast of the bounds that contains the farLeft, farRight, nearLeft and nearRight.\r\n   * Since the map view is able to rotate, the farRight is not the same as the northeast.\r\n   */\r\n  @InstanceProperty northeast: ILatLng;\r\n\r\n  /**\r\n   * The southwest of the bounds that contains the farLeft, farRight, nearLeft and nearRight.\r\n   * Since the map view is able to rotate, the nearLeft is not the same as the southwest.\r\n   */\r\n  @InstanceProperty southwest: ILatLng;\r\n\r\n  /**\r\n   * The farLeft indicates the lat/lng of the top-left of the map view.\r\n   */\r\n  @InstanceProperty farLeft: ILatLng;\r\n\r\n  /**\r\n   * The farRight indicates the lat/lng of the top-right of the map view.\r\n   */\r\n  @InstanceProperty farRight: ILatLng;\r\n\r\n  /**\r\n   * The nearLeft indicates the lat/lng of the bottom-left of the map view.\r\n   */\r\n  @InstanceProperty nearLeft: ILatLng;\r\n\r\n  /**\r\n   * The nearRight indicates the lat/lng of the bottom-right of the map view.\r\n   */\r\n  @InstanceProperty nearRight: ILatLng;\r\n\r\n  /**\r\n   * constant value : `VisibleRegion`\r\n   */\r\n  @InstanceProperty type: string;\r\n\r\n  constructor(southwest: LatLngBounds, northeast: LatLngBounds, farLeft: ILatLng, farRight: ILatLng, nearLeft: ILatLng, nearRight: ILatLng) {\r\n    this._objectInstance = new (GoogleMaps.getPlugin()).VisibleRegion(southwest, northeast, farLeft, farRight, nearLeft, nearRight);\r\n  }\r\n\r\n  /**\r\n   * Converts to string\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  toString(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\r\n   * @param precision {number}\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  toUrlValue(precision?: number): string {\r\n    return;\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns true if the given lat/lng is in this bounds.\r\n   * @param LatLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  contains(LatLng: ILatLng): boolean {\r\n    return;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const StreetViewSource = {\r\n  DEFAULT: 'DEFAULT',\r\n  OUTDOOR: 'OUTDOOR'\r\n};\r\n\r\nexport interface SetPovOption {\r\n  bearing: number;\r\n  radius?: number;\r\n  zoom?: number;\r\n  duration: number;\r\n}\r\nexport interface StreetViewSetPositionOption {\r\n  target: ILatLng;\r\n  source?: string;\r\n  radius?: number;\r\n}\r\nexport interface StreetViewCameraPano {\r\n  target: string;\r\n  bearing?: number;\r\n  tilt?: number;\r\n  zoom?: number;\r\n}\r\nexport interface StreetViewCameraPosition {\r\n  target: ILatLng;\r\n  source?: string;\r\n  radius?: number;\r\n  bearing?: number;\r\n  tilt?: number;\r\n  zoom?: number;\r\n}\r\n\r\nexport interface StreetViewControlOptions {\r\n  streetNames?: boolean;\r\n  navigation?: boolean;\r\n}\r\nexport interface StreetViewGestureOptions {\r\n  panning?: boolean;\r\n  zooming?: boolean;\r\n}\r\n\r\nexport interface StreetViewOptions {\r\n\r\n  /*\r\n   * camera: [options] Initial camera position\r\n   */\r\n  camera?: StreetViewCameraPano | StreetViewCameraPosition;\r\n\r\n  /**\r\n   * controls [options]\r\n   */\r\n  controls?: StreetViewControlOptions;\r\n\r\n  /**\r\n   * gestures [options]\r\n   */\r\n  gestures?: StreetViewGestureOptions;\r\n\r\n  /**\r\n   * Accept extra properties for future updates\r\n   */\r\n  [key: string]: any;\r\n}\r\n\r\n\r\nexport interface StreetViewNavigationLink {\r\n\r\n  /**\r\n   * panorama Id\r\n   */\r\n  panoId: string;\r\n\r\n  /**\r\n   * bearing (heading)\r\n   */\r\n  bearing: number;\r\n\r\n}\r\n\r\nexport interface StreetViewLocation {\r\n\r\n  latLng: ILatLng;\r\n\r\n  links: StreetViewNavigationLink[];\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n * You can listen to these events where appropriate\r\n */\r\nexport const GoogleMapsEvent = {\r\n  MAP_READY: 'map_ready',\r\n  MAP_CLICK: 'map_click',\r\n  MAP_LONG_CLICK: 'map_long_click',\r\n  POI_CLICK: 'poi_click',\r\n  MY_LOCATION_CLICK: 'my_location_click',\r\n  MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',\r\n  INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',\r\n  INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',\r\n  CAMERA_MOVE_START: 'camera_move_start',\r\n  CAMERA_MOVE: 'camera_move',\r\n  CAMERA_MOVE_END: 'camera_move_end',\r\n  OVERLAY_CLICK: 'overlay_click',\r\n  POLYGON_CLICK: 'polygon_click',\r\n  POLYLINE_CLICK: 'polyline_click',\r\n  CIRCLE_CLICK: 'circle_click',\r\n  GROUND_OVERLAY_CLICK: 'groundoverlay_click',\r\n  INFO_CLICK: 'info_click',\r\n  INFO_LONG_CLICK: 'info_long_click',\r\n  INFO_CLOSE: 'info_close',\r\n  INFO_OPEN: 'info_open',\r\n  MARKER_CLICK: 'marker_click',\r\n  MARKER_DRAG: 'marker_drag',\r\n  MARKER_DRAG_START: 'marker_drag_start',\r\n  MARKER_DRAG_END: 'marker_drag_end',\r\n  MAP_DRAG: 'map_drag',\r\n  MAP_DRAG_START: 'map_drag_start',\r\n  MAP_DRAG_END: 'map_drag_end',\r\n  KML_CLICK: 'kml_click',\r\n  PANORAMA_READY: 'panorama_ready',\r\n  PANORAMA_CAMERA_CHANGE: 'panorama_camera_change',\r\n  PANORAMA_LOCATION_CHANGE: 'panorama_location_change',\r\n  PANORAMA_CLICK: 'panorama_click'\r\n};\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const GoogleMapsAnimation = {\r\n  BOUNCE: 'BOUNCE',\r\n  DROP: 'DROP'\r\n};\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport const GoogleMapsMapTypeId = {\r\n  NORMAL: 'MAP_TYPE_NORMAL',\r\n  ROADMAP: 'MAP_TYPE_NORMAL',\r\n  SATELLITE: 'MAP_TYPE_SATELLITE',\r\n  HYBRID: 'MAP_TYPE_HYBRID',\r\n  TERRAIN: 'MAP_TYPE_TERRAIN',\r\n  NONE: 'MAP_TYPE_NONE'\r\n};\r\n\r\n/**\r\n * @name Google Maps\r\n * @description\r\n * This plugin uses the native Google Maps SDK\r\n * Note: As of Ionic native 4.0, this using the 2.0 version of the google maps plugin. Please make sure your plugin is updated\r\n * @usage\r\n * ```typescript\r\n * import {\r\n *  GoogleMaps,\r\n *  GoogleMap,\r\n *  GoogleMapsEvent,\r\n *  GoogleMapOptions,\r\n *  CameraPosition,\r\n *  MarkerOptions,\r\n *  Marker\r\n * } from '@ionic-native/google-maps';\r\n * import { Component } from \"@angular/core/\";\r\n *\r\n * @Component({\r\n *   selector: 'page-home',\r\n *   templateUrl: 'home.html'\r\n * })\r\n * export class HomePage {\r\n *   map: GoogleMap;\r\n *   constructor() { }\r\n *\r\n *   ionViewDidLoad() {\r\n *    this.loadMap();\r\n *   }\r\n *\r\n *  loadMap() {\r\n *\r\n *     let mapOptions: GoogleMapOptions = {\r\n *       camera: {\r\n *         target: {\r\n *           lat: 43.0741904,\r\n *           lng: -89.3809802\r\n *         },\r\n *         zoom: 18,\r\n *         tilt: 30\r\n *       }\r\n *     }\r\n *\r\n *     this.map = GoogleMaps.create('map_canvas', mapOptions);\r\n *\r\n *     let marker: Marker = this.map.addMarkerSync({\r\n *       title: 'Ionic',\r\n *       icon: 'blue',\r\n *       animation: 'DROP',\r\n *       position: {\r\n *         lat: 43.0741904,\r\n *         lng: -89.3809802\r\n *       }\r\n *     });\r\n *\r\n *     marker.on(GoogleMapsEvent.MARKER_CLICK)\r\n *       .subscribe(() => {\r\n *         alert('clicked');\r\n *       });\r\n *     });\r\n *   }\r\n * }\r\n *\r\n * ```\r\n * @classes\r\n * GoogleMaps\r\n * GoogleMap\r\n * StreetView\r\n * Circle\r\n * Encoding\r\n * Environment\r\n * Geocoder\r\n * GroundOverlay\r\n * HtmlInfoWindow\r\n * Geocoder\r\n * LatLng\r\n * LatLngBounds\r\n * Marker\r\n * MarkerCluster\r\n * Polygon\r\n * Polyline\r\n * Spherical\r\n * KmlOverlay\r\n * Poly\r\n * TileOverlay\r\n * BaseClass\r\n * BaseArrayClass\r\n * @interfaces\r\n * GoogleMapOptions\r\n * CameraPosition\r\n * CircleOptions\r\n * GeocoderRequest\r\n * GeocoderResult\r\n * GroundOverlayOptions\r\n * ILatLng\r\n * MarkerIcon\r\n * MarkerOptions\r\n * MarkerClusterIcon\r\n * MarkerClusterOptions\r\n * MyLocation\r\n * MyLocationOptions\r\n * PolygonOptions\r\n * PolylineOptions\r\n * TileOverlayOptions\r\n * KmlOverlayOptions\r\n * VisibleRegion\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: 'https://github.com/mapsplugin/cordova-plugin-googlemaps',\r\n  document: 'https://ionicframework.com/docs/native/google-maps/',\r\n  install: 'ionic cordova plugin add cordova-plugin-googlemaps --variable API_KEY_FOR_ANDROID=\"YOUR_ANDROID_API_KEY_IS_HERE\" --variable API_KEY_FOR_IOS=\"YOUR_IOS_API_KEY_IS_HERE\"',\r\n  installVariables: ['API_KEY_FOR_ANDROID', 'API_KEY_FOR_IOS'],\r\n  platforms: ['Android', 'iOS', 'Browser']\r\n})\r\n@Injectable()\r\nexport class GoogleMaps extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Creates a new GoogleMap instance\r\n   * @param element {string | HTMLElement} Element ID or reference to attach the map to\r\n   * @param options {GoogleMapOptions} [options] Options\r\n   * @return {GoogleMap}\r\n   */\r\n  static create(element: string | HTMLElement | GoogleMapOptions, options?: GoogleMapOptions): GoogleMap {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\r\n      if (element instanceof HTMLElement) {\r\n        if (!element.offsetParent) {\r\n          throw new Error('Element must be under <body>');\r\n        }\r\n        if (element.getAttribute('__pluginMapId')) {\r\n          throw new Error(`${element.tagName}[__pluginMapId='${element.getAttribute('__pluginMapId')}'] has already map.`);\r\n        }\r\n      } else if (typeof element === 'object') {\r\n        options = element as GoogleMapOptions;\r\n        element = null;\r\n      }\r\n      const googleMap: GoogleMap = new GoogleMap(element as HTMLElement | string, options);\r\n      googleMap.set('_overlays', {});\r\n      return googleMap;\r\n    } else {\r\n      const errorMessage: string[] = [\r\n        '[GoogleMaps]'\r\n      ];\r\n      if (!window.cordova) {\r\n        errorMessage.push('You need to execute \"$> ionic cordova run browser\".');\r\n        errorMessage.push('\"$> ionic serve\" is not supported.');\r\n      } else {\r\n        errorMessage.push('cordova-plugin-googlemaps is not installed or not ready yet.');\r\n      }\r\n\r\n      if (element instanceof HTMLElement) {\r\n        displayErrorMessage(element, errorMessage.join('<br />'));\r\n      } else if (typeof element === 'string') {\r\n        let targets: any[] = Array.from(document.querySelectorAll('#' + element));\r\n        if (targets.length > 0) {\r\n          targets = targets.filter((target) => {\r\n            return !target.hasAttribute('__pluginmapid');\r\n          });\r\n        }\r\n        if (targets.length === 1 && targets[0]) {\r\n          displayErrorMessage(targets[0], errorMessage.join('<br />'));\r\n        }\r\n      }\r\n\r\n      throw new Error(errorMessage.join(''));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecation keep this for backward compatibility.\r\n   * @hidden\r\n   */\r\n  create(element: string | HTMLElement | GoogleMapOptions, options?: GoogleMapOptions): GoogleMap {\r\n    console.error('GoogleMaps', '[deprecated] Please use GoogleMaps.create()');\r\n    return GoogleMaps.create(element, options);\r\n  }\r\n\r\n  /**\r\n   * Creates a new StreetView instance\r\n   * @param element {string | HTMLElement} Element ID or reference to attach the map to\r\n   * @param options {StreetViewOptions} [options] Options\r\n   * @return {StreetViewPanorama}\r\n   */\r\n  static createPanorama(element: string | HTMLElement, options?: StreetViewOptions): StreetViewPanorama {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\r\n      if (element instanceof HTMLElement) {\r\n        if (!element.offsetParent) {\r\n          throw new Error('Element must be under <body>');\r\n        }\r\n        if (element.getAttribute('__pluginMapId')) {\r\n          throw new Error(`${element.tagName}[__pluginMapId='${element.getAttribute('__pluginMapId')}'] has already map.`);\r\n        }\r\n      }\r\n      return new StreetViewPanorama(element, options);\r\n    } else {\r\n      const errorMessage: string[] = [\r\n        '[GoogleMaps]'\r\n      ];\r\n      if (!window.cordova) {\r\n        errorMessage.push('You need to execute \"$> ionic cordova run browser\".');\r\n        errorMessage.push('\"$> ionic serve\" is not supported.');\r\n      } else {\r\n        errorMessage.push('cordova-plugin-googlemaps is not installed or not ready yet.');\r\n      }\r\n\r\n      if (element instanceof HTMLElement) {\r\n        displayErrorMessage(element, errorMessage.join('<br />'));\r\n      } else if (typeof element === 'string') {\r\n        let targets: any[] = Array.from(document.querySelectorAll('#' + element));\r\n        if (targets.length > 0) {\r\n          targets = targets.filter((target) => {\r\n            return !target.hasAttribute('__pluginmapid');\r\n          });\r\n        }\r\n        if (targets.length === 1 && targets[0]) {\r\n          displayErrorMessage(targets[0], errorMessage.join('<br />'));\r\n        }\r\n      }\r\n      throw new Error(errorMessage.join(''));\r\n    }\r\n  }\r\n}\r\n\r\nconst displayErrorMessage = (element: HTMLElement, message: string) => {\r\n  const errorDiv: HTMLElement = document.createElement('div');\r\n  errorDiv.innerHTML = message;\r\n  errorDiv.style.color = 'red';\r\n  errorDiv.style.position = 'absolute';\r\n  errorDiv.style.width = '80%';\r\n  errorDiv.style.height = '50%';\r\n  errorDiv.style.top = '0px';\r\n  errorDiv.style.bottom = '0px';\r\n  errorDiv.style.right = '0px';\r\n  errorDiv.style.left = '0px';\r\n  errorDiv.style.padding = '0px';\r\n  errorDiv.style.margin = 'auto';\r\n\r\n  element.style.position = 'relative';\r\n  element.style.backgroundColor = '#ccc7';\r\n  element.appendChild(errorDiv);\r\n};\r\n\r\nconst normalizeArgumentsOfEventListener = (_objectInstance: any, args: any[]): any[] => {\r\n  if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\r\n    if (args[args.length - 1].type === 'Map' || args[args.length - 1].type === 'StreetViewPanorama') {\r\n      args[args.length - 1] = this;\r\n    } else if (_objectInstance.__pgmId.indexOf('markercluster_') !== -1) {\r\n      const _overlays: any = _objectInstance.getMap().get('_overlays') || {};\r\n      let overlay: Marker = _overlays[args[args.length - 1].getId()];\r\n      if (!overlay) {\r\n        const markerJS: any = args[args.length - 1];\r\n        const markerId: string = markerJS.getId();\r\n        const markerCluster: MarkerCluster = _objectInstance as MarkerCluster;\r\n        overlay = new Marker(markerCluster.getMap(), markerJS);\r\n        _objectInstance.getMap().get('_overlays')[markerId] = overlay;\r\n        markerJS.one(markerJS.getId() + '_remove', () => {\r\n          _objectInstance.getMap().get('_overlays')[markerId] = null;\r\n          delete _objectInstance.getMap().get('_overlays')[markerId];\r\n        });\r\n      }\r\n      args[args.length - 1] = overlay;\r\n    } else {\r\n      args[args.length - 1] = _objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\r\n    }\r\n  }\r\n  return args;\r\n};\r\n\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseClass/README.md\r\n */\r\n@Plugin({\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.BaseClass',\r\n  repo: ''\r\n})\r\nexport class BaseClass {\r\n  protected _objectInstance: any;\r\n\r\n  constructor(objInstance?: any) {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\r\n      if (!objInstance) {\r\n        objInstance = new (GoogleMaps.getPlugin().BaseClass)();\r\n      }\r\n      this._objectInstance = objInstance;\r\n    } else {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before executing any methods.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds an event listener.\r\n   * @param eventName {string} event name you want to observe.\r\n   * @return {Observable<any>}\r\n   */\r\n  @InstanceCheck({ observable: true })\r\n  addEventListener(eventName: string): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this._objectInstance.addEventListener(eventName, (...args: any[]) => {\r\n        const newArgs = normalizeArgumentsOfEventListener.call(this, this._objectInstance, args);\r\n        observer.next(newArgs);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Attaches the handler for the event that is thrown by the target, where the minimum interval between events (in milliseconds) is specified as a parameter.\r\n   * @param eventName {string} event name you want to observe.\r\n   * @param throttleInterval {number} throttle interval in milliseconds\r\n   * @return {Observable<any>}\r\n   */\r\n  // addThrottledEventListener(eventName: string, throttleInterval: number): Observable<any> {\r\n  //   return new Observable((observer) => {\r\n  //     this._objectInstance.addThrottledEventListener(eventName, (...args: any[]) => {\r\n  //       const newArgs = normalizeArgumentsOfEventListener.call(this, this._objectInstance, args);\r\n  //       observer.next(newArgs);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n\r\n  /**\r\n   * Adds an event listener that works once.\r\n   * @param eventName {string} event name you want to observe.\r\n   * @return {Promise<any>}\r\n   */\r\n  @InstanceCheck()\r\n  addEventListenerOnce(eventName: string): Promise<any> {\r\n    return new Promise<any>((resolve) => {\r\n      this._objectInstance.one(eventName, (...args: any[]) => {\r\n        const newArgs = normalizeArgumentsOfEventListener.call(this, this._objectInstance, args);\r\n        resolve(newArgs);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * Adds an event listener that works once.\r\n   * @param eventName {string} event name you want to observe.\r\n   * @return {Promise<any>}\r\n   */\r\n  @InstanceCheck()\r\n  addListenerOnce(eventName: string): Promise<any> {\r\n    console.warn('[GoogleMaps] \"addListenerOnce\" is deprecated. Please use \"addEventListenerOnce\".');\r\n    return this.addEventListenerOnce(eventName);\r\n  }\r\n\r\n  /**\r\n   * Gets a value\r\n   * @param key {any}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  get(key: string): any {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Sets a value\r\n   * @param key {string} The key name for the value. `(key)_changed` will be fired when you set value through this method.\r\n   * @param value {any}\r\n   * @param noNotify {boolean} [options] True if you want to prevent firing the `(key)_changed` event.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  set(key: string, value: any, noNotify?: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Bind a key to another object\r\n   * @param key {string} The property name you want to observe.\r\n   * @param target {any} The target object you want to observe.\r\n   * @param targetKey? {string} [options]  The property name you want to observe. If you omit this, the `key` argument is used.\r\n   * @param noNotify? {boolean} [options] True if you want to prevent `(key)_changed` event when you bind first time, because the internal status is changed from `undefined` to something.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  bindTo(key: string, target: any, targetKey?: string, noNotify?: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Alias of `addEventListener`\r\n   * @param key {string} The property name you want to observe.\r\n   * @return {Observable<any>}\r\n   */\r\n  @InstanceCheck({ observable: true })\r\n  on(eventName: string): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this._objectInstance.on(eventName, (...args: any[]) => {\r\n        const newArgs = normalizeArgumentsOfEventListener.call(this, this._objectInstance, args);\r\n        observer.next(newArgs);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Alias of `addThrottledEventListener`\r\n   * @param key {string} The property name you want to observe.\r\n   * @return {Observable<any>}\r\n   */\r\n  // @InstanceCheck({ observable: true })\r\n  // onThrottled(eventName: string): Observable<any> {\r\n  //   return new Observable((observer) => {\r\n  //     this._objectInstance.onThrottled(eventName, (...args: any[]) => {\r\n  //       const newArgs = normalizeArgumentsOfEventListener.call(this, this._objectInstance, args);\r\n  //       observer.next(newArgs);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Alias of `addEventListenerOnce`\r\n   * @param key {string} The property name you want to observe.\r\n   * @return {Promise<any>}\r\n   */\r\n  @InstanceCheck()\r\n  one(eventName: string): Promise<any> {\r\n    return new Promise<any>((resolve) => {\r\n      this._objectInstance.one(eventName, (...args: any[]) => {\r\n        const newArgs = normalizeArgumentsOfEventListener.call(this, this._objectInstance, args);\r\n        resolve(newArgs);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return true if this object has event listener for event name\r\n   * @param eventName {string} Event name\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  hasEventListener(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Clears all stored values\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  empty(): void {\r\n  }\r\n\r\n  /**\r\n   * Dispatch event.\r\n   * @param eventName {string} Event name\r\n   * @param parameters {any} [options] The data you want to pass to event listerners.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  trigger(eventName: string, ...parameters: any[]): void {\r\n  }\r\n\r\n\r\n  /**\r\n   * Executes off() and empty()\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  destroy(): void {\r\n    if (this._objectInstance.type === 'Map') {\r\n      const map: GoogleMap = this._objectInstance.getMap();\r\n      if (map) {\r\n        delete this._objectInstance.getMap().get('_overlays')[this._objectInstance.getId()];\r\n      }\r\n    }\r\n    this._objectInstance.remove();\r\n  }\r\n\r\n  /**\r\n   * Remove event listener(s)\r\n   * The `removeEventListener()` has three usages:\r\n   *  - removeEventListener(\"eventName\", listenerFunction);\r\n   *     This removes one particular event listener\r\n   *  - removeEventListener(\"eventName\");\r\n   *     This removes the event listeners that added for the event name.\r\n   *  - removeEventListener();\r\n   *     This removes all listeners.\r\n   *\r\n   * @param eventName {string} [options] Event name\r\n   * @param listener {Function} [options] Event listener\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  removeEventListener(eventName?: string, listener?: (...parameters: any[]) => void): void {}\r\n\r\n  /**\r\n   * Alias of `removeEventListener`\r\n   *\r\n   * @param eventName {string} [options] Event name\r\n   * @param listener {Function} [options] Event listener\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  off(eventName?: string, listener?: (...parameters: any[]) => void): void {}\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseArrayClass/README.md\r\n */\r\n@Plugin({\r\n  pluginName: 'BaseArrayClass',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  pluginRef: 'plugin.google.maps.BaseArrayClass'\r\n})\r\nexport class BaseArrayClass<T> extends BaseClass {\r\n\r\n  constructor(initialData?: T[] | any) {\r\n    if (initialData instanceof GoogleMaps.getPlugin().BaseArrayClass) {\r\n      super(initialData);\r\n    } else if (Array.isArray(initialData)) {\r\n      super(new (GoogleMaps.getPlugin().BaseArrayClass)(initialData));\r\n    } else {\r\n      super(new (GoogleMaps.getPlugin().BaseArrayClass)([]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all elements from the array.\r\n   * @param noNotify? {boolean} [options] Set true to prevent remove_at events.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  empty(noNotify?: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * @param fn {Function}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  forEach(fn: (element: T, index?: number) => void): void {\r\n  }\r\n\r\n  /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * @param fn {Function}\r\n   * @return {Promise<void>}\r\n   */\r\n  forEachAsync(fn: ((element: T, callback: () => void) => void)): Promise<void> {\r\n    return new Promise<void>((resolve) => {\r\n      this._objectInstance.forEach(fn, resolve);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Iterate over each element, then Returns a new value.\r\n   * Then you can get the results of each callback.\r\n   * @param fn {Function}\r\n   * @return {Object[]} returns a new array with the results\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  map(fn: (element: T, index: number) => any): any[] {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * Then you can get the results of each callback.\r\n   * @param fn {Function}\r\n   * @param callback {Function}\r\n   * @return {Promise<any>} returns a new array with the results\r\n   */\r\n  mapAsync(fn: ((element: T, callback: (newElement: any) => void) => void)): Promise<any[]> {\r\n    return new Promise<any[]>((resolve) => {\r\n      this._objectInstance.map(fn, resolve);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Same as `mapAsync`, but keep the execution order\r\n   * @param fn {Function}\r\n   * @param callback {Function}\r\n   * @return {Promise<any>} returns a new array with the results\r\n   */\r\n  mapSeries(fn: ((element: T, callback: (newElement: any) => void) => void)): Promise<any[]> {\r\n    return new Promise<any[]>((resolve) => {\r\n      this._objectInstance.mapSeries(fn, resolve);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The filter() method creates a new array with all elements that pass the test implemented by the provided function.\r\n   * @param fn {Function}\r\n   * @return {T[]} returns a new filtered array\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  filter(fn: (element: T, index: number) => boolean): T[] {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * The filterAsync() method creates a new array with all elements that pass the test implemented by the provided function.\r\n   * @param fn {Function}\r\n   * @param callback {Function}\r\n   * @return {Promise<T[]>} returns a new filtered array\r\n   */\r\n  filterAsync(fn: (element: T, callback: (result: boolean) => void) => void): Promise<T[]> {\r\n    return new Promise<any[]>((resolve) => {\r\n      this._objectInstance.filter(fn, resolve);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a reference to the underlying Array.\r\n   * @return {Object[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getArray(): T[] {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the element at the specified index.\r\n   * @param index {number}\r\n   * @return {Object}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getAt(index: number): any {\r\n  }\r\n\r\n  /**\r\n   * Returns the number of the elements.\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getLength(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.\r\n   * @param element {Object}\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  indexOf(element: T): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * The reverse() method reverses an array in place.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  reverse(): void {\r\n  }\r\n\r\n  /**\r\n   * The sort() method sorts the elements of an array in place and returns the array.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  sort(): void {\r\n  }\r\n\r\n  /**\r\n   * Inserts an element at the specified index.\r\n   * @param index {number}\r\n   * @param element {Object}\r\n   * @param noNotify? {boolean} [options] Set true to prevent insert_at event.\r\n   * @return {Object}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  insertAt(index: number, element: T, noNotify?: boolean) {\r\n  }\r\n\r\n  /**\r\n   * Removes the last element of the array and returns that element.\r\n   * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\r\n   * @return {Object}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  pop(noNotify?: boolean): T {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Adds one element to the end of the array and returns the new length of the array.\r\n   * @param element {object}\r\n   * @param noNotify? {boolean} Set true to prevent insert_at events.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  push(element: T, noNotify?: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Removes an element from the specified index.\r\n   * @param index {number}\r\n   * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  removeAt(index: number, noNotify?: boolean): T { return; }\r\n\r\n  /**\r\n   * Sets an element at the specified index.\r\n   * @param index {number}\r\n   * @param element {object}\r\n   * @param noNotify? {boolean} [options] Set true to prevent set_at event.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setAt(index: number, element: T, noNotify?: boolean): void {\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/Circle/README.md\r\n */\r\nexport class Circle extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super(_objectInstance);\r\n    this._map = _map;\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any {\r\n    return this._map;\r\n  }\r\n\r\n  /**\r\n   * Changes the center position.\r\n   * @param latLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCenter(latLng: ILatLng): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current center position\r\n   * @return {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCenter(): ILatLng {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the current circle radius.\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getRadius(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the circle radius.\r\n   * @param radius {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setRadius(radius: number): void {\r\n  }\r\n\r\n  /**\r\n   * Changes the filling color (inner color).\r\n   * @param color {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setFillColor(color: string): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current circle filling color (inner color).\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getFillColor(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the stroke width.\r\n   * @param strokeWidth {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeWidth(strokeWidth: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current circle stroke width (unit: pixel).\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeWidth(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the stroke color (outter color).\r\n   * @param strokeColor {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeColor(strokeColor: string): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current circle stroke color (outer color).\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeColor(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes click-ability of the circle.\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the circle is clickable.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the circle zIndex order.\r\n   * @param zIndex {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(zIndex: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current circle zIndex.\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Remove the circle.\r\n   */\r\n  @CordovaInstance()\r\n  remove(): void {\r\n    delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n    this._objectInstance.remove();\r\n    this.destroy();\r\n  }\r\n\r\n  /**\r\n   * Returns the latLngBounds (rectangle) that contains the circle.\r\n   * @return {LatLngBounds}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getBounds(): LatLngBounds {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set circle visibility\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the circle is visible.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean {\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.environment',\r\n  repo: ''\r\n})\r\nexport class Environment {\r\n\r\n  /**\r\n   * Set environment variables.\r\n   */\r\n  static setEnv(envOptions: EnvOptions): void {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    GoogleMaps.getPlugin().environment.setEnv(envOptions);\r\n  }\r\n\r\n  /**\r\n   * Get the open source software license information for Google Maps SDK for iOS.\r\n   * @return {Promise<any>}\r\n   */\r\n  static getLicenseInfo(): Promise<any> {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return new Promise<any>((resolve) => {\r\n      GoogleMaps.getPlugin().environment.getLicenseInfo((text: string) => resolve(text));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Specifies the background color of the app.\r\n   * @param color\r\n   */\r\n  static setBackgroundColor(color: string): void {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    GoogleMaps.getPlugin().environment.setBackgroundColor(color);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Environment.getLicenseInfo()\r\n   * @hidden\r\n   */\r\n  getLicenseInfo(): Promise<any> {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Environment.getLicenseInfo()');\r\n    return Environment.getLicenseInfo();\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Environment.setBackgroundColor()\r\n   * @hidden\r\n   */\r\n  setBackgroundColor(color: string): void {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Environment.setBackgroundColor()');\r\n    Environment.setBackgroundColor(color);\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.Geocoder',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: ''\r\n})\r\nexport class Geocoder {\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Geocoder.geocode()\r\n   * @hidden\r\n   */\r\n  geocode(request: GeocoderRequest): Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult[]>> {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Geocoder.geocode()');\r\n    return Geocoder.geocode(request);\r\n  }\r\n\r\n  /**\r\n   * Converts position to address and vice versa\r\n   * @param {GeocoderRequest} request Request object with either an address or a position\r\n   * @return {Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult>>}\r\n   */\r\n  static geocode(request: GeocoderRequest): Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult[]>> {\r\n\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    if (request.address instanceof Array || Array.isArray(request.address) ||\r\n      request.position instanceof Array || Array.isArray(request.position)) {\r\n      // -------------------------\r\n      // Geocoder.geocode({\r\n      //   address: [\r\n      //    \"Kyoto, Japan\",\r\n      //    \"Tokyo, Japan\"\r\n      //   ]\r\n      // })\r\n      // -------------------------\r\n      return new Promise<BaseArrayClass<GeocoderResult[]>>((resolve, reject) => {\r\n        GoogleMaps.getPlugin().Geocoder.geocode(request, (mvcArray: any) => {\r\n          if (mvcArray) {\r\n            resolve(new BaseArrayClass(mvcArray));\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      // -------------------------\r\n      // Geocoder.geocode({\r\n      //   address: \"Kyoto, Japan\"\r\n      // })\r\n      // -------------------------\r\n      return new Promise<GeocoderResult[]>((resolve, reject) => {\r\n        GoogleMaps.getPlugin().Geocoder.geocode(request, (results: GeocoderResult[]) => {\r\n          if (results) {\r\n            resolve(results);\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.LocationService',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: ''\r\n})\r\nexport class LocationService {\r\n\r\n  /**\r\n   * Get the current device location without map\r\n   * @return {Promise<MyLocation>}\r\n   */\r\n  static getMyLocation(options?: MyLocationOptions): Promise<MyLocation> {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return new Promise<MyLocation>((resolve, reject) => {\r\n      GoogleMaps.getPlugin().LocationService.getMyLocation(options, resolve, reject);\r\n    });\r\n  }\r\n  /**\r\n   * Return true if the application has geolocation permission\r\n   * @return {Promise<boolean>}\r\n   */\r\n  static hasPermission(): Promise<boolean> {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      GoogleMaps.getPlugin().LocationService.hasPermission(resolve, reject);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.geometry.encoding',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: ''\r\n})\r\nexport class Encoding {\r\n\r\n  /**\r\n   * Decodes an encoded path string into a sequence of LatLngs.\r\n   * @param encoded {string} an encoded path string\r\n   * @param precision? {number} default: 5\r\n   * @return {LatLng}\r\n   */\r\n  static decodePath(encoded: string, precision?: number): ILatLng[] {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().encoding.decodePath(encoded, precision);\r\n  }\r\n\r\n  /**\r\n   * Encodes a sequence of LatLngs into an encoded path string.\r\n   * @param path {ILatLng[] | BaseArrayClass<ILatLng>} a sequence of LatLngs\r\n   * @return {string}\r\n   */\r\n  static encodePath(path: ILatLng[] | BaseArrayClass<ILatLng>): string {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().encoding.encodePath(path);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Encoding.decodePath()\r\n   * @hidden\r\n   */\r\n  decodePath(encoded: string, precision?: number): ILatLng[] {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Encoding.decodePath()');\r\n    return Encoding.decodePath(encoded, precision);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Encoding.encodePath()\r\n   * @hidden\r\n   */\r\n  encodePath(path: ILatLng[] | BaseArrayClass<ILatLng>): string {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Encoding.encodePath()');\r\n    return Encoding.encodePath(path);\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.geometry.poly',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: ''\r\n})\r\nexport class Poly {\r\n\r\n  /**\r\n   * Returns true if the specified location is in the polygon path\r\n   * @param location {ILatLng}\r\n   * @param path {ILatLng[]}\r\n   * @return {boolean}\r\n   */\r\n  static containsLocation(location: ILatLng, path: ILatLng[]): boolean {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.poly.containsLocation(location, path);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the specified location is on the polyline path\r\n   * @param location {ILatLng}\r\n   * @param path {ILatLng[]}\r\n   * @return {boolean}\r\n   */\r\n  static isLocationOnEdge(location: ILatLng, path: ILatLng[]): boolean {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.poly.isLocationOnEdge(location, path);\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.geometry.spherical',\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  repo: ''\r\n})\r\nexport class Spherical {\r\n\r\n  /**\r\n   * Returns the distance, in meters, between two LatLngs.\r\n   * @param locationA {ILatLng}\r\n   * @param locationB {ILatLng}\r\n   * @return {number}\r\n   */\r\n  static computeDistanceBetween(from: ILatLng, to: ILatLng): number {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.spherical.computeDistanceBetween(from, to);\r\n  }\r\n\r\n  /**\r\n   * Returns the LatLng resulting from moving a distance from an origin in the specified heading (expressed in degrees clockwise from north)\r\n   * @param from {ILatLng}\r\n   * @param distance {number}\r\n   * @param heading {number}\r\n   * @return {LatLng}\r\n   */\r\n  static computeOffset(from: ILatLng, distance: number, heading: number): LatLng {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.spherical.computeOffset(from, distance, heading);\r\n  }\r\n\r\n  /**\r\n   * Returns the location of origin when provided with a LatLng destination, meters travelled and original heading. Headings are expressed in degrees clockwise from North. This function returns null when no solution is available.\r\n   * @param to {ILatLng} The destination LatLng.\r\n   * @param distance {number} The distance travelled, in meters.\r\n   * @param heading {number} The heading in degrees clockwise from north.\r\n   * @return {LatLng}\r\n   */\r\n  static computeOffsetOrigin(to: ILatLng, distance: number, heading: number): LatLng {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.spherical.computeOffsetOrigin(to, distance, heading);\r\n  }\r\n\r\n  /**\r\n   * Returns the length of the given path.\r\n   * @param path {ILatLng[] | BaseArrayClass<ILatLng>}\r\n   * @return {number}\r\n   */\r\n  static computeLength(path: ILatLng[] | BaseArrayClass<ILatLng>): number {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.spherical.computeLength(path);\r\n  }\r\n\r\n  /**\r\n   * Returns the area of a closed path. The computed area uses the same units as the radius.\r\n   * @param path {ILatLng[] | BaseArrayClass<ILatLng>}.\r\n   * @return {number}\r\n   */\r\n  static computeArea(path: ILatLng[] | BaseArrayClass<ILatLng>): number {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.spherical.computeLength(path);\r\n  }\r\n\r\n  /**\r\n   * Returns the signed area of a closed path. The signed area may be used to determine the orientation of the path.\r\n   * @param path {ILatLng[] | BaseArrayClass<ILatLng>}.\r\n   * @return {number}\r\n   */\r\n  static computeSignedArea(path: ILatLng[] | BaseArrayClass<ILatLng>): number {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.spherical.computeSignedArea(path);\r\n  }\r\n\r\n  /**\r\n   * Returns the heading from one LatLng to another LatLng. Headings are expressed in degrees clockwise from North within the range (-180,180).\r\n   * @param from {ILatLng}\r\n   * @param to {ILatLng}\r\n   * @return {number}\r\n   */\r\n  static computeHeading(from: ILatLng, to: ILatLng): number {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.spherical.computeHeading(from, to);\r\n  }\r\n\r\n  /**\r\n   * Returns the LatLng which lies the given fraction of the way between the origin LatLng and the destination LatLng.\r\n   * @param from {ILatLng}     The LatLng from which to start.\r\n   * @param to {ILatLng}       The LatLng toward which to travel.\r\n   * @param fraction {number}  A fraction of the distance to travel from 0.0 to 1.0 .\r\n   * @return {LatLng}\r\n   */\r\n  static interpolate(from: ILatLng, to: ILatLng, fraction: number): LatLng {\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\r\n      throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\r\n    }\r\n    return GoogleMaps.getPlugin().geometry.spherical.interpolate(from, to, fraction);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Spherical.computeDistanceBetween()\r\n   * @hidden\r\n   */\r\n  computeDistanceBetween(from: ILatLng, to: ILatLng): number {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeDistanceBetween()');\r\n    return Spherical.computeDistanceBetween(from, to);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Spherical.computeOffset()\r\n   * @hidden\r\n   */\r\n  computeOffset(from: ILatLng, distance: number, heading: number): LatLng {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeOffset()');\r\n    return Spherical.computeOffset(from, distance, heading);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Spherical.computeOffsetOrigin()\r\n   * @hidden\r\n   */\r\n  computeOffsetOrigin(to: ILatLng, distance: number, heading: number): LatLng {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeOffsetOrigin()');\r\n    return Spherical.computeOffsetOrigin(to, distance, heading);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Spherical.computeLength()\r\n   * @hidden\r\n   */\r\n  computeLength(path: ILatLng[] | BaseArrayClass<ILatLng>): number {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeLength()');\r\n    return Spherical.computeLength(path);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Spherical.computeArea()\r\n   * @hidden\r\n   */\r\n  computeArea(path: ILatLng[] | BaseArrayClass<ILatLng>): number {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeArea()');\r\n    return Spherical.computeArea(path);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Spherical.computeSignedArea()\r\n   * @hidden\r\n   */\r\n  computeSignedArea(path: ILatLng[] | BaseArrayClass<ILatLng>): number {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeSignedArea()');\r\n    return Spherical.computeSignedArea(path);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Spherical.computeHeading()\r\n   * @hidden\r\n   */\r\n  computeHeading(from: ILatLng, to: ILatLng): number {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeHeading()');\r\n    return Spherical.computeHeading(from, to);\r\n  }\r\n\r\n  /**\r\n   * @deprecation This method is static. Please use Spherical.interpolate()\r\n   * @hidden\r\n   */\r\n  interpolate(from: ILatLng, to: ILatLng, fraction: number): LatLng {\r\n    console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.interpolate()');\r\n    return Spherical.interpolate(from, to, fraction);\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'StreetViewPanorama',\r\n  plugin: 'cordova-plugin-googlemaps'\r\n})\r\nexport class StreetViewPanorama extends BaseClass {\r\n  constructor(element: string | HTMLElement, options?: StreetViewOptions) {\r\n\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\r\n      // -------------------\r\n      // Create a panorama\r\n      // -------------------\r\n      if (element instanceof HTMLElement) {\r\n        if (element.offsetWidth >= 100 && element.offsetHeight >= 100) {\r\n          super(GoogleMaps.getPlugin().StreetView.getPanorama(element, options));\r\n        } else {\r\n          throw new Error(element.tagName + ' is too small. Must be bigger than 100x100.');\r\n        }\r\n      } else if (typeof element === 'string') {\r\n\r\n        super(GoogleMaps.getPlugin().StreetView.getPanorama(new Promise<any[]>((resolve, reject) => {\r\n          let count: number;\r\n          let i: number;\r\n          count = 0;\r\n          const timer: any = setInterval(() => {\r\n            let targets: any[];\r\n            for (i = 0; i < TARGET_ELEMENT_FINDING_QUERYS.length; i++) {\r\n              targets = Array.from(document.querySelectorAll(TARGET_ELEMENT_FINDING_QUERYS[i] + element));\r\n              if (targets.length > 0) {\r\n                targets = targets.filter((target) => {\r\n                  return !target.hasAttribute('__pluginmapid');\r\n                });\r\n              }\r\n              if (targets.length === 1 && targets[0] && targets[0].offsetWidth >= 100 && targets[0].offsetHeight >= 100) {\r\n                clearInterval(timer);\r\n                resolve([targets[0], options]);\r\n                return;\r\n              }\r\n\r\n            }\r\n            if (count++ < 20) {\r\n              return;\r\n            }\r\n            clearInterval(timer);\r\n            this._objectInstance.remove();\r\n            if (targets.length > 0 && targets[0] && targets[0].offsetWidth < 100 || targets[0].offsetHeight < 100) {\r\n              reject(new Error(targets[0].tagName + '[#' + element + '] is too small. Must be bigger than 100x100.'));\r\n            } else {\r\n              reject(new Error('Can not find the element [#' + element + ']'));\r\n            }\r\n          }, 100);\r\n        }), options));\r\n\r\n      }\r\n    } else {\r\n\r\n      const errorMessage: string[] = [\r\n        '[GoogleMaps]'\r\n      ];\r\n      if (!window.cordova) {\r\n        errorMessage.push('You need to execute \"$> ionic cordova run browser\".');\r\n        errorMessage.push('\"$> ionic serve\" is not supported.');\r\n      } else {\r\n        errorMessage.push('cordova-plugin-googlemaps is not installed or not ready yet.');\r\n      }\r\n\r\n      if (element instanceof HTMLElement) {\r\n        displayErrorMessage(element, errorMessage.join('<br />'));\r\n      } else if (typeof element === 'string') {\r\n        let targets: any[] = Array.from(document.querySelectorAll('#' + element));\r\n        if (targets.length > 0) {\r\n          targets = targets.filter((target) => {\r\n            return !target.hasAttribute('__pluginmapid');\r\n          });\r\n        }\r\n        if (targets.length === 1 && targets[0]) {\r\n          displayErrorMessage(targets[0], errorMessage.join('<br />'));\r\n        }\r\n      }\r\n      throw new Error(errorMessage.join(''));\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the point of view for the Street View panorama.\r\n   */\r\n  @CordovaInstance()\r\n  setPov(pov: StreetViewCameraPano): void {}\r\n\r\n  /**\r\n   * Sets the StreetViewPanorama to a given location.\r\n   */\r\n  @CordovaInstance()\r\n  setPosition(cameraPosition: String | StreetViewSetPositionOption): void {}\r\n\r\n  /**\r\n   * Toggles the ability for users to use pan around on the panorama using gestures.\r\n   * @param gestureEnable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPanningGesturesEnabled(gestureEnable: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the panning gesture is enabled.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getPanningGesturesEnabled(): boolean { return; }\r\n\r\n  /**\r\n   * Toggles the ability for users to zoom on the panorama using gestures.\r\n   * @param gestureEnable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZoomGesturesEnabled(gestureEnable: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the zooming gesture is enabled.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZoomGesturesEnabled(): boolean { return; }\r\n\r\n  /**\r\n   * Toggles the ability for users to see street names on the panorama.\r\n   * @param gestureEnable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStreetNamesEnabled(gestureEnable: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the street names control is enabled.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStreetNamesEnabled(): boolean { return; }\r\n\r\n  /**\r\n   * Toggles the ability for users to move between panoramas.\r\n   * @param gestureEnable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setNavigationEnabled(gestureEnable: boolean): void {}\r\n\r\n  /**\r\n   * Return true if the navigation control is enabled.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getNavigationEnabled(): boolean { return; }\r\n\r\n  /**\r\n   * Return the navigation links (StreetViewLocation.links)\r\n   * @return {StreetViewNavigationLink[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getLinks(): StreetViewNavigationLink[] { return; }\r\n\r\n  /**\r\n   * Return the current location\r\n   * @return {StreetViewLocation}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getLocation(): StreetViewLocation { return; }\r\n\r\n  /**\r\n   * Return the current panorama id\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getPanoId(): string { return; }\r\n\r\n  /**\r\n   * Return the current position (StreetViewLocation.latLng)\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getPosition(): ILatLng { return; }\r\n\r\n  /**\r\n   * Destroy a panorama completely\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  remove(): Promise<any> {\r\n    return new Promise<any>((resolve) => {\r\n      this._objectInstance.remove(() => resolve());\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  pluginName: 'GoogleMaps',\r\n  plugin: 'cordova-plugin-googlemaps'\r\n})\r\nexport class GoogleMap extends BaseClass {\r\n  constructor(element: HTMLElement | string, options?: GoogleMapOptions) {\r\n\r\n    if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\r\n      // ---------------\r\n      // Create a map\r\n      // ---------------\r\n      if (element instanceof HTMLElement) {\r\n        if (!element.offsetParent) {\r\n          throw new Error('Element must be under <body>');\r\n        }\r\n        if (element.offsetWidth >= 100 && element.offsetHeight >= 100) {\r\n          super(GoogleMaps.getPlugin().Map.getMap(element, options));\r\n        } else {\r\n          throw new Error(element.tagName + ' is too small. Must be bigger than 100x100.');\r\n        }\r\n      } else if (typeof element === 'string') {\r\n\r\n        super(GoogleMaps.getPlugin().Map.getMap(new Promise<any[]>((resolve, reject) => {\r\n          let count: number;\r\n          let i: number;\r\n          count = 0;\r\n          const timer: any = setInterval(() => {\r\n            let targets: any[];\r\n            for (i = 0; i < TARGET_ELEMENT_FINDING_QUERYS.length; i++) {\r\n              targets = Array.from(document.querySelectorAll(TARGET_ELEMENT_FINDING_QUERYS[i] + element));\r\n              if (targets.length > 0) {\r\n                targets = targets.filter((target) => {\r\n                  return !target.hasAttribute('__pluginmapid');\r\n                });\r\n              }\r\n              if (targets.length === 1 && targets[0] && targets[0].offsetWidth >= 100 && targets[0].offsetHeight >= 100) {\r\n                clearInterval(timer);\r\n                resolve([targets[0], options]);\r\n                return;\r\n              }\r\n\r\n            }\r\n            if (count++ < 20) {\r\n              return;\r\n            }\r\n            clearInterval(timer);\r\n            this._objectInstance.remove();\r\n            if (targets.length > 0 && targets[0] && (targets[0].offsetWidth < 100 || targets[0].offsetHeight < 100)) {\r\n              reject(new Error(targets[0].tagName + '[#' + element + '] is too small. Must be bigger than 100x100.'));\r\n            } else {\r\n              reject(new Error('Can not find the element [#' + element + ']'));\r\n            }\r\n          }, 100);\r\n        }), options));\r\n\r\n      } else if (element === null && options) {\r\n        super(GoogleMaps.getPlugin().Map.getMap(null, options));\r\n      }\r\n    } else {\r\n\r\n      const errorMessage: string[] = [\r\n        '[GoogleMaps]'\r\n      ];\r\n      if (!window.cordova) {\r\n        errorMessage.push('You need to execute \"$> ionic cordova run browser\".');\r\n        errorMessage.push('\"$> ionic serve\" is not supported.');\r\n      } else {\r\n        errorMessage.push('cordova-plugin-googlemaps is not installed or not ready yet.');\r\n      }\r\n      console.error(errorMessage.join(''));\r\n\r\n      if (element instanceof HTMLElement) {\r\n        displayErrorMessage(element, errorMessage.join('<br />'));\r\n      } else if (typeof element === 'string') {\r\n        let targets: any[] = Array.from(document.querySelectorAll('#' + element));\r\n        if (targets.length > 0) {\r\n          targets = targets.filter((target) => {\r\n            return !target.hasAttribute('__pluginmapid');\r\n          });\r\n        }\r\n        if (targets.length === 1 && targets[0]) {\r\n          displayErrorMessage(targets[0], errorMessage.join('<br />'));\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Changes the map div\r\n   * @param domNode {HTMLElement | string} [options] If you want to display the map in an html element, you need to specify an element or id. If omit this argument, the map is detached from webview.\r\n   */\r\n  @InstanceCheck()\r\n  setDiv(domNode?: HTMLElement | string): void {\r\n    if (!domNode) {\r\n      this._objectInstance.setDiv();\r\n      return;\r\n    }\r\n    if (typeof domNode === 'string') {\r\n      (new Promise<any>((resolve, reject) => {\r\n        let i, targets: any[];\r\n        for (i = 0; i < TARGET_ELEMENT_FINDING_QUERYS.length; i++) {\r\n          targets = Array.from(document.querySelectorAll(TARGET_ELEMENT_FINDING_QUERYS[i] + domNode));\r\n          if (targets.length > 0) {\r\n            targets = targets.filter((target) => {\r\n              return !target.hasAttribute('__pluginmapid');\r\n            });\r\n          }\r\n          if (targets.length === 1 && targets[0] && targets[0].offsetWidth >= 100 && targets[0].offsetHeight >= 100) {\r\n            resolve(targets[0] as HTMLElement);\r\n            return;\r\n          }\r\n\r\n        }\r\n        reject('Can not find [#' + domNode + '] element');\r\n      }))\r\n      .then((element: HTMLElement) => {\r\n        this._objectInstance.setDiv(element);\r\n      });\r\n    } else {\r\n      if (domNode instanceof HTMLElement &&\r\n          !domNode.offsetParent &&\r\n          domNode.offsetWidth >= 100 && domNode.offsetHeight >= 100) {\r\n        this._objectInstance.setDiv(domNode);\r\n      } else {\r\n        throw new Error(domNode.tagName + ' is too small. Must be bigger than 100x100.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the map HTML element\r\n   * @return {HTMLElement}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getDiv(): HTMLElement {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the map type id\r\n   * @param mapTypeId {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setMapTypeId(mapTypeId: MapType | string): void {\r\n  }\r\n\r\n  /**\r\n   * Moves the camera with animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  animateCamera(cameraPosition: CameraPosition<any>): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Zooming in the camera with animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  animateCameraZoomIn(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Zooming out the camera with animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  animateCameraZoomOut(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Moves the camera without animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  moveCamera(cameraPosition: CameraPosition<any>): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Zooming in the camera without animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  moveCameraZoomIn(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Zooming out the camera without animation\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  moveCameraZoomOut(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the camera.\r\n   * @return {CameraPosition}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraPosition(): CameraPosition<ILatLng> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get the current camera target position\r\n   * @return {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraTarget(): ILatLng {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get the current camera zoom level\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraZoom(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get the current camera bearing\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraBearing(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get the current camera tilt (view angle)\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getCameraTilt(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set the center position of the camera view\r\n   * @param latLng {ILatLng | ILatLng[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCameraTarget(latLng: ILatLng | ILatLng[]): void {\r\n  }\r\n\r\n  /**\r\n   * Set zoom level of the camera\r\n   * @param zoomLevel {number} Zoom level\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCameraZoom(zoomLevel: number): void {\r\n  }\r\n\r\n  /**\r\n   * Set the camera view angle\r\n   * @param tiltAngle {number} Tilt angle\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCameraTilt(tiltAngle: number): void {}\r\n\r\n  /**\r\n   * Set camera bearing\r\n   * @param bearing {any}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCameraBearing(bearing: any): void {\r\n  }\r\n\r\n  /**\r\n   * Changes the center of the map by the given distance in pixels\r\n   * @param x {number}\r\n   * @param y {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  panBy(x: number, y: number): void { }\r\n\r\n  /**\r\n   * Get the current visible region (southWest and northEast)\r\n   * @return {VisibleRegion}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisibleRegion(): VisibleRegion {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get the current device location\r\n   * @return {Promise<MyLocation>}\r\n   */\r\n  @CordovaInstance()\r\n  getMyLocation(options?: MyLocationOptions): Promise<MyLocation> {\r\n    return new Promise<MyLocation>((resolve, reject) => {\r\n      GoogleMaps.getPlugin().LocationService.getMyLocation(options, resolve, reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set false to ignore all clicks on the map\r\n   * @param isClickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(isClickable: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Destroy a map completely\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  remove(): Promise<any> {\r\n    if (this.get('_overlays')) {\r\n      Object.keys(this.get('_overlays')).forEach((overlayId: string) => {\r\n        this.get('_overlays')[overlayId] = null;\r\n        delete this.get('_overlays')[overlayId];\r\n      });\r\n    }\r\n    return new Promise<any>((resolve) => {\r\n      this._objectInstance.remove(() => resolve());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove all overlays, such as marker\r\n   * @return {Promise<any>}\r\n   */\r\n  @InstanceCheck()\r\n  clear(): Promise<any> {\r\n    if (this.get('_overlays')) {\r\n      Object.keys(this.get('_overlays')).forEach((overlayId: string) => {\r\n        this.get('_overlays')[overlayId] = null;\r\n        delete this.get('_overlays')[overlayId];\r\n      });\r\n    }\r\n    return new Promise<any>((resolve) => {\r\n      this._objectInstance.clear(() => resolve());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Convert the unit from LatLng to the pixels from the left/top of the map div\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  fromLatLngToPoint(latLng: ILatLng): Promise<any[]> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Convert the unit from the pixels from the left/top to the LatLng\r\n   * @return {Promise<LatLng>}\r\n   */\r\n  @CordovaInstance()\r\n  fromPointToLatLng(point: number[]): Promise<LatLng> { return; }\r\n\r\n  /**\r\n   * Set true if you want to show the MyLocation control (blue dot)\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setMyLocationEnabled(enabled: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Set true if you want to show the MyLocation button\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setMyLocationButtonEnabled(enabled: boolean): void {}\r\n\r\n  /**\r\n   * Get the currently focused building\r\n   * @return {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  getFocusedBuilding(): Promise<any> {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set true if you want to show the indoor map\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setIndoorEnabled(enabled: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Set true if you want to show the traffic layer\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setTrafficEnabled(enabled: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Set true if you want to show the compass button\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setCompassEnabled(enabled: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Sets the preference for whether all gestures should be enabled or disabled\r\n   * @param enabled {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setAllGesturesEnabled(enabled: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Set visibility of the map\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Adjust the map padding (same as CSS padding rule)\r\n   * @param top {number}\r\n   * @param right {number}\r\n   * @param left {number}\r\n   * @param bottom {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPadding(top: number, right?: number, bottom?: number, left?: number): void { }\r\n\r\n  /**\r\n   * Set options\r\n   * @param options\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setOptions(options: GoogleMapOptions): void {\r\n  }\r\n\r\n  /**\r\n   * Adds a marker\r\n   * @param options {MarkerOptions} options\r\n   * @return {Promise<Marker>}\r\n   */\r\n  @InstanceCheck()\r\n  addMarker(options: MarkerOptions): Promise<Marker | any> {\r\n    return new Promise<Marker>((resolve, reject) => {\r\n      this._objectInstance.addMarker(options, (marker: any) => {\r\n        if (marker) {\r\n          const overlayId: string = marker.getId();\r\n          const overlay: Marker = new Marker(this, marker);\r\n          this.get('_overlays')[overlayId] = overlay;\r\n          marker.one(overlayId + '_remove', () => {\r\n            if (this.get('_overlays')) {\r\n              this.get('_overlays')[overlayId] = null;\r\n              overlay.destroy();\r\n            }\r\n          });\r\n          resolve(overlay);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a marker in synchronous\r\n   * @param options {MarkerOptions} options\r\n   * @Returns {Marker}\r\n   */\r\n  @InstanceCheck()\r\n  addMarkerSync(options: MarkerOptions): Marker {\r\n    const marker: any = this._objectInstance.addMarker(options);\r\n    const overlayId: string = marker.getId();\r\n    const overlay: Marker = new Marker(this, marker);\r\n    this.get('_overlays')[overlayId] = overlay;\r\n    marker.one(overlayId + '_remove', () => {\r\n      if (this.get('_overlays')) {\r\n        this.get('_overlays')[overlayId] = null;\r\n        overlay.destroy();\r\n      }\r\n    });\r\n    return overlay;\r\n  }\r\n\r\n  /**\r\n   * Adds a marker cluster\r\n   * @param options {MarkerClusterOptions} options\r\n   * @return {Promise<MarkerCluster>}\r\n   */\r\n  @InstanceCheck()\r\n  addMarkerCluster(options: MarkerClusterOptions): Promise<MarkerCluster | any> {\r\n    return new Promise<MarkerCluster>((resolve, reject) => {\r\n      this._objectInstance.addMarkerCluster(options, (markerCluster: any) => {\r\n        if (markerCluster) {\r\n          const overlayId = markerCluster.getId();\r\n          const overlay = new MarkerCluster(this, markerCluster);\r\n          this.get('_overlays')[overlayId] = overlay;\r\n          markerCluster.one('remove', () => {\r\n            if (this.get('_overlays')) {\r\n              this.get('_overlays')[overlayId] = null;\r\n              overlay.destroy();\r\n            }\r\n          });\r\n          markerCluster.set('_overlays', new BaseArrayClass());\r\n          resolve(overlay);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a marker cluster in synchronous\r\n   * @param options {MarkerClusterOptions} options\r\n   * @Returns {MarkerCluster}\r\n   */\r\n  @InstanceCheck()\r\n  addMarkerClusterSync(options: MarkerClusterOptions): MarkerCluster {\r\n    const markerCluster: any = this._objectInstance.addMarkerCluster(options);\r\n    const overlayId: string = markerCluster.getId();\r\n    const overlay: MarkerCluster = new MarkerCluster(this, markerCluster);\r\n    this.get('_overlays')[overlayId] = overlay;\r\n    markerCluster.one(overlayId + '_remove', () => {\r\n      if (this.get('_overlays')) {\r\n        this.get('_overlays')[overlayId] = null;\r\n        overlay.destroy();\r\n      }\r\n    });\r\n    markerCluster.set('_overlays', new BaseArrayClass());\r\n    return overlay;\r\n  }\r\n\r\n  /**\r\n   * Adds a circle\r\n   * @param options {CircleOptions} options\r\n   * @return {Promise<Circle>}\r\n   */\r\n  @InstanceCheck()\r\n  addCircle(options: CircleOptions): Promise<Circle | any> {\r\n    return new Promise<Circle>((resolve, reject) => {\r\n      this._objectInstance.addCircle(options, (circle: any) => {\r\n        if (circle) {\r\n          const overlayId: string = circle.getId();\r\n          const overlay = new Circle(this, circle);\r\n          this.get('_overlays')[overlayId] = overlay;\r\n          circle.one(overlayId + '_remove', () => {\r\n            if (this.get('_overlays')) {\r\n              this.get('_overlays')[overlayId] = null;\r\n              overlay.destroy();\r\n            }\r\n          });\r\n          resolve(overlay);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a circle in synchronous\r\n   * @param options {CircleOptions} options\r\n   * @return {Circle}\r\n   */\r\n  @InstanceCheck()\r\n  addCircleSync(options: CircleOptions): Circle {\r\n    const circle: any = this._objectInstance.addCircle(options);\r\n    const overlayId: string = circle.getId();\r\n    const overlay = new Circle(this, circle);\r\n    this.get('_overlays')[overlayId] = overlay;\r\n    circle.one(overlayId + '_remove', () => {\r\n      if (this.get('_overlays')) {\r\n        this.get('_overlays')[overlayId] = null;\r\n        overlay.destroy();\r\n      }\r\n    });\r\n    return overlay;\r\n  }\r\n  /**\r\n   * Adds a polygon\r\n   * @param options {PolygonOptions} options\r\n   * @return {Promise<Polygon>}\r\n   */\r\n  @InstanceCheck()\r\n  addPolygon(options: PolygonOptions): Promise<Polygon | any> {\r\n    return new Promise<Polygon>((resolve, reject) => {\r\n      this._objectInstance.addPolygon(options, (polygon: any) => {\r\n        if (polygon) {\r\n          const overlayId: string = polygon.getId();\r\n          const overlay = new Polygon(this, polygon);\r\n          this.get('_overlays')[overlayId] = overlay;\r\n          polygon.one(overlayId + '_remove', () => {\r\n            if (this.get('_overlays')) {\r\n              this.get('_overlays')[overlayId] = null;\r\n              overlay.destroy();\r\n            }\r\n          });\r\n          resolve(overlay);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a polygon in synchronous\r\n   * @param options {PolygonOptions} options\r\n   * @return {Polygon}\r\n   */\r\n  @InstanceCheck()\r\n  addPolygonSync(options: PolygonOptions): Polygon {\r\n    const polygon: any = this._objectInstance.addPolygon(options);\r\n    const overlayId: string = polygon.getId();\r\n    const overlay = new Polygon(this, polygon);\r\n    this.get('_overlays')[overlayId] = overlay;\r\n    polygon.one(overlayId + '_remove', () => {\r\n      if (this.get('_overlays')) {\r\n        this.get('_overlays')[overlayId] = null;\r\n        overlay.destroy();\r\n      }\r\n    });\r\n    return overlay;\r\n  }\r\n\r\n  /**\r\n   * Adds a polyline\r\n   * @param options {PolylineOptions} options\r\n   * @return {Promise<Polyline>}\r\n   */\r\n  @InstanceCheck()\r\n  addPolyline(options: PolylineOptions): Promise<Polyline | any> {\r\n    return new Promise<Polyline>((resolve, reject) => {\r\n      this._objectInstance.addPolyline(options, (polyline: any) => {\r\n        if (polyline) {\r\n          const overlayId: string = polyline.getId();\r\n          const overlay = new Polyline(this, polyline);\r\n          this.get('_overlays')[overlayId] = overlay;\r\n          polyline.one(overlayId + '_remove', () => {\r\n            if (this.get('_overlays')) {\r\n              this.get('_overlays')[overlayId] = null;\r\n              overlay.destroy();\r\n            }\r\n          });\r\n          resolve(overlay);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a polyline in synchronous\r\n   * @param options {PolylineOptions} options\r\n   * @return {Polyline}\r\n   */\r\n  @InstanceCheck()\r\n  addPolylineSync(options: PolylineOptions): Polyline {\r\n    const polyline: any = this._objectInstance.addPolyline(options);\r\n    const overlayId: string = polyline.getId();\r\n    const overlay = new Polyline(this, polyline);\r\n    this.get('_overlays')[overlayId] = overlay;\r\n    polyline.one(overlayId + '_remove', () => {\r\n      if (this.get('_overlays')) {\r\n        this.get('_overlays')[overlayId] = null;\r\n        overlay.destroy();\r\n      }\r\n    });\r\n    return overlay;\r\n  }\r\n\r\n  /**\r\n   * Adds a tile overlay\r\n   * @param options {TileOverlayOptions} options\r\n   * @return {Promise<TileOverlay>}\r\n   */\r\n  @InstanceCheck()\r\n  addTileOverlay(options: TileOverlayOptions): Promise<TileOverlay | any> {\r\n    return new Promise<TileOverlay>((resolve, reject) => {\r\n      this._objectInstance.addTileOverlay(options, (tileOverlay: any) => {\r\n        if (tileOverlay) {\r\n          const overlayId: string = tileOverlay.getId();\r\n          const overlay = new TileOverlay(this, tileOverlay);\r\n          this.get('_overlays')[overlayId] = overlay;\r\n          tileOverlay.one(overlayId + '_remove', () => {\r\n            if (this.get('_overlays')) {\r\n              this.get('_overlays')[overlayId] = null;\r\n              overlay.destroy();\r\n            }\r\n          });\r\n          resolve(overlay);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a tile overlay in synchronous\r\n   * @param options {TileOverlayOptions} options\r\n   * @return {TileOverlay}\r\n   */\r\n  @InstanceCheck()\r\n  addTileOverlaySync(options: TileOverlayOptions): TileOverlay {\r\n    const tileOverlay: any = this._objectInstance.addTileOverlay(options);\r\n    const overlayId: string = tileOverlay.getId();\r\n    const overlay = new TileOverlay(this, tileOverlay);\r\n    this.get('_overlays')[overlayId] = overlay;\r\n    tileOverlay.one(overlayId + '_remove', () => {\r\n      if (this.get('_overlays')) {\r\n        this.get('_overlays')[overlayId] = null;\r\n        overlay.destroy();\r\n      }\r\n    });\r\n    return overlay;\r\n  }\r\n\r\n  /**\r\n   * Adds a ground overlay\r\n   * @param options {GroundOverlayOptions} options\r\n   * @return {Promise<GroundOverlay>}\r\n   */\r\n  @InstanceCheck()\r\n  addGroundOverlay(options: GroundOverlayOptions): Promise<GroundOverlay | any> {\r\n    return new Promise<GroundOverlay>((resolve, reject) => {\r\n      this._objectInstance.addGroundOverlay(options, (groundOverlay: any) => {\r\n        if (groundOverlay) {\r\n          const overlayId: string = groundOverlay.getId();\r\n          const overlay = new GroundOverlay(this, groundOverlay);\r\n          this.get('_overlays')[overlayId] = overlay;\r\n          groundOverlay.one(overlayId + '_remove', () => {\r\n            if (this.get('_overlays')) {\r\n              this.get('_overlays')[overlayId] = null;\r\n              overlay.destroy();\r\n            }\r\n          });\r\n          resolve(overlay);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds a ground overlay in synchronous\r\n   * @param options {GroundOverlayOptions} options\r\n   * @return {GroundOverlay}\r\n   */\r\n  @InstanceCheck()\r\n  addGroundOverlaySync(options: GroundOverlayOptions): GroundOverlay {\r\n    const groundOverlay: any = this._objectInstance.addGroundOverlay(options);\r\n    const overlayId: string = groundOverlay.getId();\r\n    const overlay = new GroundOverlay(this, groundOverlay);\r\n    this.get('_overlays')[overlayId] = overlay;\r\n    groundOverlay.one(overlayId + '_remove', () => {\r\n      if (this.get('_overlays')) {\r\n        this.get('_overlays')[overlayId] = null;\r\n        overlay.destroy();\r\n      }\r\n    });\r\n    return overlay;\r\n  }\r\n\r\n  /**\r\n   * Adds a kml overlay\r\n   * @param options {KmlOverlayOptions} options\r\n   * @return {Promise<KmlOverlay>}\r\n   */\r\n  @InstanceCheck()\r\n  addKmlOverlay(options: KmlOverlayOptions): Promise<KmlOverlay> {\r\n    return new Promise<KmlOverlay>((resolve, reject) => {\r\n      this._objectInstance.addKmlOverlay(options, (kmlOverlay: any) => {\r\n        if (kmlOverlay) {\r\n          const overlayId: string = kmlOverlay.getId();\r\n          const overlay = new KmlOverlay(this, kmlOverlay);\r\n          this.get('_overlays')[overlayId] = overlay;\r\n          kmlOverlay.one(overlayId + '_remove', () => {\r\n            if (this.get('_overlays')) {\r\n              this.get('_overlays')[overlayId] = null;\r\n              overlay.destroy();\r\n            }\r\n          });\r\n          resolve(overlay);\r\n        } else {\r\n          reject();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the base64 encoded screen capture of the map.\r\n   * @param options {ToDataUrlOptions} [options] options\r\n   * @return {Promise<string>}\r\n   */\r\n  @CordovaInstance()\r\n  toDataURL(options?: ToDataUrlOptions): Promise<string> { return; }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class GroundOverlay extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super(_objectInstance);\r\n    this._map = _map;\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any {\r\n    return this._map;\r\n  }\r\n\r\n  /**\r\n   * Changes the bounds of the GroundOverlay\r\n   * @param bounds { ILatLng[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setBounds(bounds: ILatLng[]): void {\r\n  }\r\n\r\n  /**\r\n   * Changes the bearing of the ground overlay\r\n   * @param bearing {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setBearing(bearing: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current bearing value\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getBearing(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the image of the ground overlay\r\n   * @param imageUrl {string} URL of image\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setImage(imageUrl: string): void {}\r\n\r\n  /**\r\n   * Changes the opacity of the ground overlay from 0.0 to 1.0\r\n   * @param opacity {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setOpacity(opacity: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current opacity\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getOpacity(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes click-ability of the ground overlay\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the ground overlay is clickable\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes visibility of the ground overlay\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the ground overlay is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the ground overlay zIndex order\r\n   * @param index {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(index: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current ground overlay zIndex\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Remove the ground overlay\r\n   */\r\n  @CordovaInstance()\r\n  remove(): void {\r\n    delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n    this._objectInstance.remove();\r\n    this.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\n@Plugin({\r\n  plugin: 'cordova-plugin-googlemaps',\r\n  pluginName: 'GoogleMaps',\r\n  pluginRef: 'plugin.google.maps.HtmlInfoWindow',\r\n  repo: ''\r\n})\r\nexport class HtmlInfoWindow extends BaseClass {\r\n\r\n  constructor() {\r\n    super(new (GoogleMaps.getPlugin().HtmlInfoWindow)());\r\n  }\r\n\r\n  /**\r\n   * Changes the backgroundColor\r\n   * @param color {string}\r\n   */\r\n  @CordovaInstance()\r\n  setBackgroundColor(color: string): void {\r\n  }\r\n\r\n  /**\r\n   * Set your HTML contents.\r\n   * @param content {any} String containing text or HTML element\r\n   * @param cssOptions? {any} CSS styles for the container element of HTMLInfoWindow\r\n   */\r\n  @CordovaInstance()\r\n  setContent(content: string | Element, cssOptions?: any): void {\r\n  }\r\n\r\n  /**\r\n   * Open the htmlInfoWindow\r\n   * @param marker {Marker}\r\n   */\r\n  @CordovaInstance()\r\n  open(marker: any): any {\r\n  }\r\n\r\n  /**\r\n   * Close the htmlInfoWindow\r\n   */\r\n  @CordovaInstance()\r\n  close(): void {\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class Marker extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super(_objectInstance);\r\n    this._map = _map;\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any {\r\n    return this._map;\r\n  }\r\n\r\n  /**\r\n   * Set the marker position.\r\n   * @param latLng {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPosition(latLng: ILatLng): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the marker position.\r\n   * @return {ILatLng}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getPosition(): ILatLng {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Show the normal infoWindow of the marker.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  showInfoWindow(): void {\r\n  }\r\n\r\n  /**\r\n   * Hide the normal infoWindow of the marker.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  hideInfoWindow(): void {\r\n  }\r\n\r\n  /**\r\n   * Specify the animation either `DROP` or `BOUNCE`\r\n   * @param animation {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setAnimation(animation: string): void {\r\n  }\r\n\r\n  /**\r\n   * Set true if you **do not want** to move the map when you click on the marker.\r\n   * @param disableAutoPan {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setDisableAutoPan(disableAutoPan: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Set false if you want to hide the marker.\r\n   * @param visible\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the marker is visible\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  isVisible(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes title of the normal infoWindow.\r\n   * @param title {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setTitle(title: string): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the title strings.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getTitle(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes snippet of the normal infoWindow.\r\n   * @param snippet {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setSnippet(snippet: string): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the snippet strings.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getSnippet(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the marker opacity from 0.0 to 1.0.\r\n   * @param alpha {number} Opacity\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setOpacity(alpha: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the marker opacity.\r\n   * @return {number} Opacity\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getOpacity(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Remove the marker.\r\n   */\r\n  @CordovaInstance()\r\n  remove(): void {\r\n    delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n    this._objectInstance.remove();\r\n    this.destroy();\r\n  }\r\n\r\n  /**\r\n   * Changes the info window anchor. This defaults to 50% from the left of the image and at the bottom of the image.\r\n   * @param x {number} Distance from left of the icon image in pixels.\r\n   * @param y {number} Distance from top of the icon image in pixels.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setIconAnchor(x: number, y: number): void {\r\n  }\r\n\r\n  /**\r\n   * Changes the info window anchor. This defaults to 50% from the left of the image and at the top of the image.\r\n   * @param x {number} Distance from left of the icon image in pixels.\r\n   * @param y {number} Distance from top of the icon image in pixels.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setInfoWindowAnchor(x: number, y: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the infoWindow is shown on the marker\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  isInfoWindowShown(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays.\r\n   * @param y {number} z-index\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(zIndex: number): void {\r\n  }\r\n\r\n  /**\r\n   * Get z-index\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set true if you allow all users to drag the marker.\r\n   * @param draggable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setDraggable(draggable: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the marker drag is enabled.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  isDraggable(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set true if you want to be flat marker.\r\n   * @param flat {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setFlat(flat: boolean): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes icon url and/or size\r\n   * @param icon\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setIcon(icon: MarkerIcon): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set the marker rotation angle.\r\n   * @param rotation {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setRotation(rotation: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the marker rotation angle.\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getRotation(): number {\r\n    return;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MarkerCluster extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super(_objectInstance);\r\n    this._map = _map;\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Add one marker location\r\n   * @param marker {MarkerOptions} one location\r\n   * @param skipRedraw? {boolean} marker cluster does not redraw the marker cluster if true.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  addMarker(marker: MarkerOptions): void {\r\n  }\r\n\r\n  /**\r\n   * Add marker locations\r\n   * @param markers {MarkerOptions[]} multiple location\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  addMarkers(markers: MarkerOptions[]): void {\r\n  }\r\n\r\n  /**\r\n   * Remove the marker cluster\r\n   */\r\n  @CordovaInstance()\r\n  remove(): void {\r\n    this._objectInstance.set('_overlays', undefined);\r\n    delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n    this._objectInstance.remove();\r\n    this.destroy();\r\n  }\r\n\r\n  /**\r\n   * Returns the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any {\r\n    return this._map;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class Polygon extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super(_objectInstance);\r\n    this._map = _map;\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any {\r\n    return this._map;\r\n  }\r\n\r\n  /**\r\n   * Changes the polygon points.\r\n   * @param points {ILatLng[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPoints(points: ILatLng[]): void {\r\n  }\r\n\r\n  /**\r\n   * Returns an instance of the BaseArrayClass.\r\n   * You can modify the points.\r\n   * @return {BaseArrayClass<ILatLng>}\r\n   */\r\n  getPoints(): BaseArrayClass<ILatLng> {\r\n    return new BaseArrayClass<ILatLng>(this._objectInstance.getPoints());\r\n  }\r\n\r\n  /**\r\n   * Changes the polygon holes.\r\n   * @param holes {ILatLng[][]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setHoles(holes: ILatLng[][]): void {\r\n  }\r\n\r\n  /**\r\n   * Returns an instance of the BaseArrayClass.\r\n   * You can modify the holes.\r\n   * @return {BaseArrayClass<ILatLng[]>}\r\n   */\r\n  getHoles(): BaseArrayClass<ILatLng[]> {\r\n    const holes: ILatLng[][] = this._objectInstance.getPoints();\r\n    const results: BaseArrayClass<ILatLng[]> = new BaseArrayClass<ILatLng[]>();\r\n    holes.forEach((hole: ILatLng[]) => {\r\n      results.push(hole);\r\n    });\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Changes the filling color (inner color)\r\n   * @param fillColor {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setFillColor(fillColor: string): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current polygon filling color (inner color).\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getFillColor(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the stroke color (outer color)\r\n   * @param strokeColor {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeColor(strokeColor: string): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current polygon stroke color (outer color)\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeColor(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes click-ability of the polygon\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the polygon is clickable\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes visibility of the polygon\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the polygon is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the polygon zIndex order.\r\n   * @param zIndex {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(zIndex: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current polygon zIndex\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Remove the polygon.\r\n   */\r\n  @CordovaInstance()\r\n  remove(): void {\r\n    delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n    this._objectInstance.remove();\r\n    this.destroy();\r\n  }\r\n\r\n  /**\r\n   * Changes the polygon stroke width\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeWidth(strokeWidth: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the polygon stroke width\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeWidth(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\r\n   * @param geodesic {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setGeodesic(geodesic: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the polygon is geodesic.\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getGeodesic(): boolean {\r\n    return;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class Polyline extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super(_objectInstance);\r\n    this._map = _map;\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any {\r\n    return this._map;\r\n  }\r\n\r\n  /**\r\n   * Changes the polyline points.\r\n   * @param points {ILatLng[]}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setPoints(points: ILatLng[]): void {\r\n  }\r\n\r\n  /**\r\n   * Returns an instance of the BaseArrayClass\r\n   * You can modify the points.\r\n   * @return {BaseArrayClass<ILatLng>}\r\n   */\r\n  getPoints(): BaseArrayClass<ILatLng> {\r\n    return new BaseArrayClass<ILatLng>(this._objectInstance.getPoints());\r\n  }\r\n\r\n  /**\r\n   * When true, edges of the polyline are interpreted as geodesic and will follow the curvature of the Earth.\r\n   * @param geoDesic {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setGeoDesic(geoDesic: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the polyline is geodesic\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getGeodesic(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes visibility of the polyline\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the polyline is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes click-ability of the polyline\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the polyline is clickable\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the polyline color\r\n   * @param strokeColor {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeColor(strokeColor: string): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current polyline color\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeColor(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the polyline stroke width\r\n   * @param strokeWidth {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setStrokeWidth(strokeWidth: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current stroke width (unit: pixel).\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getStrokeWidth(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Changes the polyline zIndex order.\r\n   * @param index {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(index: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the current polyline zIndex\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Remove the polyline\r\n   */\r\n  @CordovaInstance()\r\n  remove(): void {\r\n    delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n    this._objectInstance.remove();\r\n    this.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class TileOverlay extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super(_objectInstance);\r\n    this._map = _map;\r\n  }\r\n\r\n  /**\r\n   * Returns the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): string {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): any {\r\n    return this._map;\r\n  }\r\n\r\n  /**\r\n   * Set whether the tiles should fade in.\r\n   * @param fadeIn {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setFadeIn(fadeIn: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Get whether the tiles should fade in\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getFadeIn(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set the zIndex of the tile overlay\r\n   * @param zIndex {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setZIndex(zIndex: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the zIndex of the tile overlay\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getZIndex(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set the opacity of the tile overlay\r\n   * @param opacity {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setOpacity(opacity: number): void {\r\n  }\r\n\r\n  /**\r\n   * Returns the opacity of the tile overlay\r\n   * @return {number}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getOpacity(): number {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Set false if you want to hide\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {\r\n  }\r\n\r\n  /**\r\n   * Returns true if the tile overlay is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get tile size\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getTileSize(): any {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Remove the tile overlay\r\n   */\r\n  @CordovaInstance()\r\n  remove(): void {\r\n    delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n    this._objectInstance.remove();\r\n    this.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class KmlOverlay extends BaseClass {\r\n\r\n  private _map: GoogleMap;\r\n\r\n  constructor(_map: GoogleMap, _objectInstance: any) {\r\n    super(_objectInstance);\r\n    this._map = _map;\r\n\r\n    Object.defineProperty(self, 'camera', {\r\n        value: this._objectInstance.camera,\r\n        writable: false\r\n    });\r\n    Object.defineProperty(self, 'kmlData', {\r\n        value: this._objectInstance.kmlData,\r\n        writable: false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the viewport to contains all overlays\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getDefaultViewport(): CameraPosition<ILatLng | ILatLng[]> { return; }\r\n\r\n  /**\r\n   * Returns the ID of instance.\r\n   * @return {string}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getId(): string { return; }\r\n\r\n  /**\r\n   * Returns the map instance.\r\n   * @return {GoogleMap}\r\n   */\r\n  getMap(): GoogleMap { return this._map; }\r\n\r\n  /**\r\n   * Changes visibility of the kml overlay\r\n   * @param visible {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVisible(visible: boolean): void {}\r\n\r\n  /**\r\n   * Returns true if the kml overlay is visible\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getVisible(): boolean { return; }\r\n\r\n  /**\r\n   * Changes click-ability of the KmlOverlay\r\n   * @param clickable {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setClickable(clickable: boolean): void {}\r\n\r\n  /**\r\n   * Returns true if the KmlOverlay is clickable\r\n   * @return {boolean}\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getClickable(): boolean { return; }\r\n\r\n  /**\r\n   * Remove the KmlOverlay\r\n   */\r\n  @CordovaInstance()\r\n  remove(): void {\r\n    delete this._objectInstance.getMap().get('_overlays')[this.getId()];\r\n    this._objectInstance.remove();\r\n    this.destroy();\r\n  }\r\n}\r\n"]}